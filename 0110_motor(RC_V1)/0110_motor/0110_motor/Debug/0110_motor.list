
0110_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006308  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800651c  0800651c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006524  08006524  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800652c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  2000005c  08006588  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006588  000084a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010141  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a03  00000000  00000000  000181cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aef  00000000  00000000  0001b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016940  00000000  00000000  0001c4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012094  00000000  00000000  00032e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d187  00000000  00000000  00044eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  000d2078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d5ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006490 	.word	0x08006490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006490 	.word	0x08006490

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <delay_us>:
#include "delay.h"



void delay_us(uint16_t us)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
    uint16_t start = __HAL_TIM_GET_COUNTER(&htim11);  // 또는 다른 적절한 타이머
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <delay_us+0x34>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000590:	81fb      	strh	r3, [r7, #14]
    while ((__HAL_TIM_GET_COUNTER(&htim11) - start) < us);
 8000592:	bf00      	nop
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <delay_us+0x34>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	1ad2      	subs	r2, r2, r3
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d3f7      	bcc.n	8000594 <delay_us+0x14>
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200001a4 	.word	0x200001a4

080005b8 <DHT11_SetPinOutput>:

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
    HAL_Delay(1000);  // Wait for DHT11 to get stable
}

static void DHT11_SetPinOutput(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = DHT11_PIN;
 80005cc:	2310      	movs	r3, #16
 80005ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <DHT11_SetPinOutput+0x38>)
 80005e2:	f001 ffc9 	bl	8002578 <HAL_GPIO_Init>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020800 	.word	0x40020800

080005f4 <DHT11_SetPinInput>:

static void DHT11_SetPinInput(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = DHT11_PIN;
 8000608:	2310      	movs	r3, #16
 800060a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <DHT11_SetPinInput+0x34>)
 800061a:	f001 ffad 	bl	8002578 <HAL_GPIO_Init>
}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020800 	.word	0x40020800

0800062c <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]

    for(i = 0; i < 8; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	e028      	b.n	800068e <DHT11_ReadByte+0x62>
        while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));  // Wait for pin to go high
 800063c:	bf00      	nop
 800063e:	2110      	movs	r1, #16
 8000640:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <DHT11_ReadByte+0x74>)
 8000642:	f002 f91d 	bl	8002880 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f8      	beq.n	800063e <DHT11_ReadByte+0x12>
        delay_us(40);  // Wait for 40 microseconds
 800064c:	2028      	movs	r0, #40	@ 0x28
 800064e:	f7ff ff97 	bl	8000580 <delay_us>

        if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {  // If pin is still high
 8000652:	2110      	movs	r1, #16
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <DHT11_ReadByte+0x74>)
 8000656:	f002 f913 	bl	8002880 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d013      	beq.n	8000688 <DHT11_ReadByte+0x5c>
            data |= (1 << (7-i));  // Then its a 1
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f1c3 0307 	rsb	r3, r3, #7
 8000666:	2201      	movs	r2, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	b25a      	sxtb	r2, r3
 800066e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000672:	4313      	orrs	r3, r2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	71bb      	strb	r3, [r7, #6]
            while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));  // Wait for pin to go low
 8000678:	bf00      	nop
 800067a:	2110      	movs	r1, #16
 800067c:	4808      	ldr	r0, [pc, #32]	@ (80006a0 <DHT11_ReadByte+0x74>)
 800067e:	f002 f8ff 	bl	8002880 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f8      	bne.n	800067a <DHT11_ReadByte+0x4e>
    for(i = 0; i < 8; i++) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	3301      	adds	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d9d3      	bls.n	800063c <DHT11_ReadByte+0x10>
        }
    }

    return data;
 8000694:	79bb      	ldrb	r3, [r7, #6]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800

080006a4 <DHT11_Read>:

uint8_t DHT11_Read(uint8_t *temperature, uint8_t *humidity) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0};
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	2300      	movs	r3, #0
 80006b4:	743b      	strb	r3, [r7, #16]

    // Start signal
    DHT11_SetPinOutput();
 80006b6:	f7ff ff7f 	bl	80005b8 <DHT11_SetPinOutput>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	4829      	ldr	r0, [pc, #164]	@ (8000764 <DHT11_Read+0xc0>)
 80006c0:	f002 f8f6 	bl	80028b0 <HAL_GPIO_WritePin>
    HAL_Delay(18);  // At least 18ms delay
 80006c4:	2012      	movs	r0, #18
 80006c6:	f001 fd8f 	bl	80021e8 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	4825      	ldr	r0, [pc, #148]	@ (8000764 <DHT11_Read+0xc0>)
 80006d0:	f002 f8ee 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(40);  // Wait for 40 microseconds
 80006d4:	2028      	movs	r0, #40	@ 0x28
 80006d6:	f7ff ff53 	bl	8000580 <delay_us>

    DHT11_SetPinInput();
 80006da:	f7ff ff8b 	bl	80005f4 <DHT11_SetPinInput>

    if(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 80006de:	2110      	movs	r1, #16
 80006e0:	4820      	ldr	r0, [pc, #128]	@ (8000764 <DHT11_Read+0xc0>)
 80006e2:	f002 f8cd 	bl	8002880 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d136      	bne.n	800075a <DHT11_Read+0xb6>
        while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));  // Wait for pin to go high
 80006ec:	bf00      	nop
 80006ee:	2110      	movs	r1, #16
 80006f0:	481c      	ldr	r0, [pc, #112]	@ (8000764 <DHT11_Read+0xc0>)
 80006f2:	f002 f8c5 	bl	8002880 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f8      	beq.n	80006ee <DHT11_Read+0x4a>
        while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));   // Wait for pin to go low
 80006fc:	bf00      	nop
 80006fe:	2110      	movs	r1, #16
 8000700:	4818      	ldr	r0, [pc, #96]	@ (8000764 <DHT11_Read+0xc0>)
 8000702:	f002 f8bd 	bl	8002880 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <DHT11_Read+0x5a>

        // Read 5 bytes
        for(int i = 0; i < 5; i++) {
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e00c      	b.n	800072c <DHT11_Read+0x88>
            data[i] = DHT11_ReadByte();
 8000712:	f7ff ff8b 	bl	800062c <DHT11_ReadByte>
 8000716:	4603      	mov	r3, r0
 8000718:	4619      	mov	r1, r3
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 5; i++) {
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b04      	cmp	r3, #4
 8000730:	ddef      	ble.n	8000712 <DHT11_Read+0x6e>
        }

        // Verify checksum
        if(data[4] == (data[0] + data[1] + data[2] + data[3])) {
 8000732:	7c3b      	ldrb	r3, [r7, #16]
 8000734:	461a      	mov	r2, r3
 8000736:	7b3b      	ldrb	r3, [r7, #12]
 8000738:	4619      	mov	r1, r3
 800073a:	7b7b      	ldrb	r3, [r7, #13]
 800073c:	440b      	add	r3, r1
 800073e:	7bb9      	ldrb	r1, [r7, #14]
 8000740:	440b      	add	r3, r1
 8000742:	7bf9      	ldrb	r1, [r7, #15]
 8000744:	440b      	add	r3, r1
 8000746:	429a      	cmp	r2, r3
 8000748:	d107      	bne.n	800075a <DHT11_Read+0xb6>
            *humidity = data[0];
 800074a:	7b3a      	ldrb	r2, [r7, #12]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	701a      	strb	r2, [r3, #0]
            *temperature = data[2];
 8000750:	7bba      	ldrb	r2, [r7, #14]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	701a      	strb	r2, [r3, #0]
            return 1;  // Success
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <DHT11_Read+0xb8>
        }
    }

    return 0;  // Error
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40020800 	.word	0x40020800

08000768 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <MX_GPIO_Init+0x11c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a3f      	ldr	r2, [pc, #252]	@ (8000884 <MX_GPIO_Init+0x11c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b3d      	ldr	r3, [pc, #244]	@ (8000884 <MX_GPIO_Init+0x11c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a38      	ldr	r2, [pc, #224]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b36      	ldr	r3, [pc, #216]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a31      	ldr	r2, [pc, #196]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x11c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4825      	ldr	r0, [pc, #148]	@ (8000888 <MX_GPIO_Init+0x120>)
 80007f4:	f002 f85c 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2110      	movs	r1, #16
 80007fc:	4823      	ldr	r0, [pc, #140]	@ (800088c <MX_GPIO_Init+0x124>)
 80007fe:	f002 f857 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000802:	2200      	movs	r2, #0
 8000804:	21cf      	movs	r1, #207	@ 0xcf
 8000806:	4822      	ldr	r0, [pc, #136]	@ (8000890 <MX_GPIO_Init+0x128>)
 8000808:	f002 f852 	bl	80028b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4819      	ldr	r0, [pc, #100]	@ (8000888 <MX_GPIO_Init+0x120>)
 8000824:	f001 fea8 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	2302      	movs	r3, #2
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4813      	ldr	r0, [pc, #76]	@ (800088c <MX_GPIO_Init+0x124>)
 8000840:	f001 fe9a 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000844:	230f      	movs	r3, #15
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_GPIO_Init+0x128>)
 800085c:	f001 fe8c 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000860:	23c0      	movs	r3, #192	@ 0xc0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_GPIO_Init+0x128>)
 8000878:	f001 fe7e 	bl	8002578 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800
 8000890:	40020400 	.word	0x40020400

08000894 <Motor_PWM_Control>:
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
}

void Motor_PWM_Control(uint16_t pwm_num) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
  // 모터 1 (채널 1, PA6) 속도 설정 (0-1000)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_num);
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <Motor_PWM_Control+0x34>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	88fa      	ldrh	r2, [r7, #6]
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34

  // 모터 2 (채널 2, PA7) 속도 설정 (0-1000)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_num);
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <Motor_PWM_Control+0x34>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	88fa      	ldrh	r2, [r7, #6]
 80008ac:	639a      	str	r2, [r3, #56]	@ 0x38

  // PWM 시작 (CubeMX에서 이미 설정했다면 불필요)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008ae:	2100      	movs	r1, #0
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <Motor_PWM_Control+0x34>)
 80008b2:	f002 fea3 	bl	80035fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008b6:	2104      	movs	r1, #4
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <Motor_PWM_Control+0x34>)
 80008ba:	f002 fe9f 	bl	80035fc <HAL_TIM_PWM_Start>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000cc 	.word	0x200000cc

080008cc <Motor_Direction_Control>:

void Motor_Direction_Control(Motor_Direction dir) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
//void Motor_Direction_Control() {
  // PB0, PB1: 모터 1 방향 제어
  // PB2, PB3: 모터 2 방향 제어
  switch(dir){
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d85f      	bhi.n	800099c <Motor_Direction_Control+0xd0>
 80008dc:	a201      	add	r2, pc, #4	@ (adr r2, 80008e4 <Motor_Direction_Control+0x18>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	080008f5 	.word	0x080008f5
 80008e8:	0800091f 	.word	0x0800091f
 80008ec:	08000949 	.word	0x08000949
 80008f0:	08000973 	.word	0x08000973
    case FORWARD_DIR:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // 정방향
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	482a      	ldr	r0, [pc, #168]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 80008fa:	f001 ffd9 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2102      	movs	r1, #2
 8000902:	4828      	ldr	r0, [pc, #160]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000904:	f001 ffd4 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // 정방향
 8000908:	2201      	movs	r2, #1
 800090a:	2104      	movs	r1, #4
 800090c:	4825      	ldr	r0, [pc, #148]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 800090e:	f001 ffcf 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2108      	movs	r1, #8
 8000916:	4823      	ldr	r0, [pc, #140]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000918:	f001 ffca 	bl	80028b0 <HAL_GPIO_WritePin>
      break;
 800091c:	e03e      	b.n	800099c <Motor_Direction_Control+0xd0>

    case BACKWARD_DIR:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000924:	f001 ffc4 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 800092e:	f001 ffbf 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2104      	movs	r1, #4
 8000936:	481b      	ldr	r0, [pc, #108]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000938:	f001 ffba 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2108      	movs	r1, #8
 8000940:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000942:	f001 ffb5 	bl	80028b0 <HAL_GPIO_WritePin>
      break;
 8000946:	e029      	b.n	800099c <Motor_Direction_Control+0xd0>

    case RIGHT_TURN:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4815      	ldr	r0, [pc, #84]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 800094e:	f001 ffaf 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000958:	f001 ffaa 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2104      	movs	r1, #4
 8000960:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000962:	f001 ffa5 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2108      	movs	r1, #8
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 800096c:	f001 ffa0 	bl	80028b0 <HAL_GPIO_WritePin>
      break;
 8000970:	e014      	b.n	800099c <Motor_Direction_Control+0xd0>

    case LEFT_TURN:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000978:	f001 ff9a 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2102      	movs	r1, #2
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000982:	f001 ff95 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2104      	movs	r1, #4
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 800098c:	f001 ff90 	bl	80028b0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <Motor_Direction_Control+0xd8>)
 8000996:	f001 ff8b 	bl	80028b0 <HAL_GPIO_WritePin>
      break;
 800099a:	bf00      	nop
  }

}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40020400 	.word	0x40020400

080009a8 <Self_Driving_state>:

uint8_t Self_Driving_state(void){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  uint16_t Dist_Compare;
  Dist_Compare = FL_Dist - FR_Dist;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <Self_Driving_state+0x6c>)
 80009b0:	881a      	ldrh	r2, [r3, #0]
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <Self_Driving_state+0x70>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	80fb      	strh	r3, [r7, #6]

  if(FL_Dist >= 60 && FR_Dist >= 60){
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <Self_Driving_state+0x6c>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b3b      	cmp	r3, #59	@ 0x3b
 80009c0:	d905      	bls.n	80009ce <Self_Driving_state+0x26>
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <Self_Driving_state+0x70>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80009c8:	d901      	bls.n	80009ce <Self_Driving_state+0x26>
    return FORWARD;
 80009ca:	2346      	movs	r3, #70	@ 0x46
 80009cc:	e01b      	b.n	8000a06 <Self_Driving_state+0x5e>
  }
  else if(FR_Dist >= FL_Dist && FR_Dist > 40){  // 오른쪽으로 치우침
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <Self_Driving_state+0x70>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <Self_Driving_state+0x6c>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d305      	bcc.n	80009e6 <Self_Driving_state+0x3e>
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <Self_Driving_state+0x70>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	2b28      	cmp	r3, #40	@ 0x28
 80009e0:	d901      	bls.n	80009e6 <Self_Driving_state+0x3e>
    return RIGHT;
 80009e2:	2352      	movs	r3, #82	@ 0x52
 80009e4:	e00f      	b.n	8000a06 <Self_Driving_state+0x5e>
  }
  else if(Dist_Compare > 0 && FL_Dist > 40){  // 왼쪽으로 치우침
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d005      	beq.n	80009f8 <Self_Driving_state+0x50>
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <Self_Driving_state+0x6c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b28      	cmp	r3, #40	@ 0x28
 80009f2:	d901      	bls.n	80009f8 <Self_Driving_state+0x50>
    return LEFT;
 80009f4:	234c      	movs	r3, #76	@ 0x4c
 80009f6:	e006      	b.n	8000a06 <Self_Driving_state+0x5e>
  }
  else if(B_Dist >= 50){
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <Self_Driving_state+0x74>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b31      	cmp	r3, #49	@ 0x31
 80009fe:	d901      	bls.n	8000a04 <Self_Driving_state+0x5c>
    return BACKWARD;
 8000a00:	2342      	movs	r3, #66	@ 0x42
 8000a02:	e000      	b.n	8000a06 <Self_Driving_state+0x5e>
  }
  else{
    return BREAKING;
 8000a04:	2304      	movs	r3, #4
  }

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200000be 	.word	0x200000be
 8000a18:	200000c0 	.word	0x200000c0
 8000a1c:	200000c2 	.word	0x200000c2

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b092      	sub	sp, #72	@ 0x48
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f001 fb6d 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f9e1 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f7ff fe9b 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a32:	f001 f8f7 	bl	8001c24 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a36:	f000 fb1b 	bl	8001070 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a3a:	f001 f8c9 	bl	8001bd0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8000a3e:	f000 fb99 	bl	8001174 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000a42:	f000 fc07 	bl	8001254 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000a46:	f000 fc4d 	bl	80012e4 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8000a4a:	f001 f915 	bl	8001c78 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &ultra_test, 1);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	49c3      	ldr	r1, [pc, #780]	@ (8000d60 <main+0x340>)
 8000a52:	48c4      	ldr	r0, [pc, #784]	@ (8000d64 <main+0x344>)
 8000a54:	f004 f901 	bl	8004c5a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim10);  // Delay용
 8000a58:	48c3      	ldr	r0, [pc, #780]	@ (8000d68 <main+0x348>)
 8000a5a:	f002 fd1b 	bl	8003494 <HAL_TIM_Base_Start>

  HC06_StartReceive();
 8000a5e:	f001 fa09 	bl	8001e74 <HC06_StartReceive>
  HCSR04_Init();
 8000a62:	f000 fed5 	bl	8001810 <HCSR04_Init>

  pwm_num = 430;
 8000a66:	4bc1      	ldr	r3, [pc, #772]	@ (8000d6c <main+0x34c>)
 8000a68:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8000a6c:	801a      	strh	r2, [r3, #0]
  uint8_t dht_cnt = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Check if data is available from Bluetooth
    DHT11_Read(&temperature, &humidity);  // DHT11 센서 읽기
 8000a74:	49be      	ldr	r1, [pc, #760]	@ (8000d70 <main+0x350>)
 8000a76:	48bf      	ldr	r0, [pc, #764]	@ (8000d74 <main+0x354>)
 8000a78:	f7ff fe14 	bl	80006a4 <DHT11_Read>
//    printf("Distance 1: %d cm, Distance 2: %d cm, Distance 3: %d cm\r\n",
//           Get_Distance1(), Get_Distance2(), Get_Distance3());
//    printf("Temperature: %d°C, Humidity: %d%%\r\n",  // 온습도 출력 추가
//           temperature, humidity);
    dht_cnt++;
 8000a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a80:	3301      	adds	r3, #1
 8000a82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if(dht_cnt >= 40){
 8000a86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a8a:	2b27      	cmp	r3, #39	@ 0x27
 8000a8c:	d917      	bls.n	8000abe <main+0x9e>
      char buffer[50];
      sprintf(buffer, "Temp: %d C, Hum: %d %%\r\n", temperature, humidity);
 8000a8e:	4bb9      	ldr	r3, [pc, #740]	@ (8000d74 <main+0x354>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4bb6      	ldr	r3, [pc, #728]	@ (8000d70 <main+0x350>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	1d38      	adds	r0, r7, #4
 8000a9a:	49b7      	ldr	r1, [pc, #732]	@ (8000d78 <main+0x358>)
 8000a9c:	f005 f858 	bl	8005b50 <siprintf>
      HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fb9c 	bl	80001e0 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	48b2      	ldr	r0, [pc, #712]	@ (8000d7c <main+0x35c>)
 8000ab4:	f004 f810 	bl	8004ad8 <HAL_UART_Transmit>
      dht_cnt = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    HCSR04_Read();
 8000abe:	f000 febd 	bl	800183c <HCSR04_Read>

    FL_Dist = Get_Distance1() - 3;
 8000ac2:	f000 fe31 	bl	8001728 <Get_Distance1>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4bac      	ldr	r3, [pc, #688]	@ (8000d80 <main+0x360>)
 8000ace:	801a      	strh	r2, [r3, #0]
    FR_Dist = Get_Distance2();
 8000ad0:	f000 fe7e 	bl	80017d0 <Get_Distance2>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4baa      	ldr	r3, [pc, #680]	@ (8000d84 <main+0x364>)
 8000ada:	801a      	strh	r2, [r3, #0]
    B_Dist = Get_Distance3();
 8000adc:	f000 fe88 	bl	80017f0 <Get_Distance3>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4ba8      	ldr	r3, [pc, #672]	@ (8000d88 <main+0x368>)
 8000ae6:	801a      	strh	r2, [r3, #0]

    if (HC06_DataAvailable())
 8000ae8:	f001 f9e6 	bl	8001eb8 <HC06_DataAvailable>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80ee 	beq.w	8000cd0 <main+0x2b0>
    {

      uint16_t data_length = HC06_GetReceivedData(rx_data, sizeof(rx_data));
 8000af4:	2140      	movs	r1, #64	@ 0x40
 8000af6:	48a5      	ldr	r0, [pc, #660]	@ (8000d8c <main+0x36c>)
 8000af8:	f001 f9f0 	bl	8001edc <HC06_GetReceivedData>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if (data_length > 0)    // RC카 시작 / 대기
 8000b02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01a      	beq.n	8000b40 <main+0x120>
      {
        switch(rx_data[0]){
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8000d8c <main+0x36c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b41      	cmp	r3, #65	@ 0x41
 8000b10:	d00b      	beq.n	8000b2a <main+0x10a>
 8000b12:	2b50      	cmp	r3, #80	@ 0x50
 8000b14:	d113      	bne.n	8000b3e <main+0x11e>
          case PAUSE:
            rc_start = STOP_CAR;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	@ (8000d90 <main+0x370>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
            rc_mode = STOP_MODE;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8000d94 <main+0x374>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
            Motor_PWM_Control(0);        // 브레이크
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff feb6 	bl	8000894 <Motor_PWM_Control>
            break;
 8000b28:	e00a      	b.n	8000b40 <main+0x120>
          case START:
            rc_start = START_CAR;
 8000b2a:	4b99      	ldr	r3, [pc, #612]	@ (8000d90 <main+0x370>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
            rc_mode = STOP_MODE;
 8000b30:	4b98      	ldr	r3, [pc, #608]	@ (8000d94 <main+0x374>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
            Motor_PWM_Control(0);        // 브레이크
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff feac 	bl	8000894 <Motor_PWM_Control>
            break;
 8000b3c:	e000      	b.n	8000b40 <main+0x120>
          default:
            break;
 8000b3e:	bf00      	nop
        }
      }

      if (rc_start == START_CAR && data_length > 0)
 8000b40:	4b93      	ldr	r3, [pc, #588]	@ (8000d90 <main+0x370>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d15c      	bne.n	8000c02 <main+0x1e2>
 8000b48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d058      	beq.n	8000c02 <main+0x1e2>
      {
        switch(rx_data[0]){
 8000b50:	4b8e      	ldr	r3, [pc, #568]	@ (8000d8c <main+0x36c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3b43      	subs	r3, #67	@ 0x43
 8000b56:	2b15      	cmp	r3, #21
 8000b58:	d852      	bhi.n	8000c00 <main+0x1e0>
 8000b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <main+0x140>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000c01 	.word	0x08000c01
 8000b68:	08000c01 	.word	0x08000c01
 8000b6c:	08000c01 	.word	0x08000c01
 8000b70:	08000c01 	.word	0x08000c01
 8000b74:	08000c01 	.word	0x08000c01
 8000b78:	08000c01 	.word	0x08000c01
 8000b7c:	08000c01 	.word	0x08000c01
 8000b80:	08000c01 	.word	0x08000c01
 8000b84:	08000c01 	.word	0x08000c01
 8000b88:	08000c01 	.word	0x08000c01
 8000b8c:	08000c01 	.word	0x08000c01
 8000b90:	08000c01 	.word	0x08000c01
 8000b94:	08000c01 	.word	0x08000c01
 8000b98:	08000c01 	.word	0x08000c01
 8000b9c:	08000c01 	.word	0x08000c01
 8000ba0:	08000bb9 	.word	0x08000bb9
 8000ba4:	08000be5 	.word	0x08000be5
 8000ba8:	08000c01 	.word	0x08000c01
 8000bac:	08000c01 	.word	0x08000c01
 8000bb0:	08000c01 	.word	0x08000c01
 8000bb4:	08000bf3 	.word	0x08000bf3
        case SQUARE:
          Motor_PWM_Control(0);        // 브레이크
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe6b 	bl	8000894 <Motor_PWM_Control>
          HAL_Delay(500);
 8000bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bc2:	f001 fb11 	bl	80021e8 <HAL_Delay>
          rc_mode = MANUAL_MODE;
 8000bc6:	4b73      	ldr	r3, [pc, #460]	@ (8000d94 <main+0x374>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	701a      	strb	r2, [r3, #0]
          break;
 8000bcc:	e019      	b.n	8000c02 <main+0x1e2>
        case CIRCLE:
          Motor_PWM_Control(0);        // 브레이크
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fe60 	bl	8000894 <Motor_PWM_Control>
          HAL_Delay(500);
 8000bd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bd8:	f001 fb06 	bl	80021e8 <HAL_Delay>
          rc_mode = SELF_DRIVING_MODE;
 8000bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <main+0x374>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	701a      	strb	r2, [r3, #0]
          break;
 8000be2:	e00e      	b.n	8000c02 <main+0x1e2>
        case TRIANGLE:      //속도 업
          // Perform action for moving forward
          pwm_num += 10;
 8000be4:	4b61      	ldr	r3, [pc, #388]	@ (8000d6c <main+0x34c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	330a      	adds	r3, #10
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b5f      	ldr	r3, [pc, #380]	@ (8000d6c <main+0x34c>)
 8000bee:	801a      	strh	r2, [r3, #0]
          break;
 8000bf0:	e007      	b.n	8000c02 <main+0x1e2>
        case CROSS:         //속도 다운
          // Perform action for moving backward
          pwm_num -= 10;
 8000bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d6c <main+0x34c>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	3b0a      	subs	r3, #10
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8000d6c <main+0x34c>)
 8000bfc:	801a      	strh	r2, [r3, #0]
          break;
 8000bfe:	e000      	b.n	8000c02 <main+0x1e2>
        default:
          break;
 8000c00:	bf00      	nop
        }
      }

      if (rc_mode == MANUAL_MODE && data_length > 0)
 8000c02:	4b64      	ldr	r3, [pc, #400]	@ (8000d94 <main+0x374>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d156      	bne.n	8000cb8 <main+0x298>
 8000c0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d052      	beq.n	8000cb8 <main+0x298>
      {
        switch(rx_data[0]){
 8000c12:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <main+0x36c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3b42      	subs	r3, #66	@ 0x42
 8000c18:	2b10      	cmp	r3, #16
 8000c1a:	d84c      	bhi.n	8000cb6 <main+0x296>
 8000c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <main+0x204>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c7b 	.word	0x08000c7b
 8000c28:	08000cb7 	.word	0x08000cb7
 8000c2c:	08000cb7 	.word	0x08000cb7
 8000c30:	08000cb7 	.word	0x08000cb7
 8000c34:	08000c69 	.word	0x08000c69
 8000c38:	08000cb7 	.word	0x08000cb7
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000cb7 	.word	0x08000cb7
 8000c44:	08000cb7 	.word	0x08000cb7
 8000c48:	08000cb7 	.word	0x08000cb7
 8000c4c:	08000ca1 	.word	0x08000ca1
 8000c50:	08000cb7 	.word	0x08000cb7
 8000c54:	08000cb7 	.word	0x08000cb7
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cb7 	.word	0x08000cb7
 8000c60:	08000cb7 	.word	0x08000cb7
 8000c64:	08000c8b 	.word	0x08000c8b
          case FORWARD:        // 전진
            // Perform action for turning left
            Motor_Direction_Control(FORWARD_DIR);  // 방향 설정
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fe2f 	bl	80008cc <Motor_Direction_Control>
            Motor_PWM_Control(pwm_num);        // 속도 제어
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <main+0x34c>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe0e 	bl	8000894 <Motor_PWM_Control>
            break;
 8000c78:	e01e      	b.n	8000cb8 <main+0x298>
          case BACKWARD:       // 후진
            // Perform action for turning right
            Motor_Direction_Control(BACKWARD_DIR);  // 방향 설정
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff fe26 	bl	80008cc <Motor_Direction_Control>
            Motor_PWM_Control(400);        // 속도 제어
 8000c80:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000c84:	f7ff fe06 	bl	8000894 <Motor_PWM_Control>
            break;
 8000c88:	e016      	b.n	8000cb8 <main+0x298>
          case RIGHT:        //우회전
            // Perform action for turning left
            Motor_Direction_Control(RIGHT_TURN);  // 방향 설정
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fe1e 	bl	80008cc <Motor_Direction_Control>
            Motor_PWM_Control(pwm_num - 50);        // 속도 제어
 8000c90:	4b36      	ldr	r3, [pc, #216]	@ (8000d6c <main+0x34c>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	3b32      	subs	r3, #50	@ 0x32
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fdfb 	bl	8000894 <Motor_PWM_Control>
            break;
 8000c9e:	e00b      	b.n	8000cb8 <main+0x298>
          case LEFT:       // 좌회전
            // Perform action for turning right
            Motor_Direction_Control(LEFT_TURN);  // 방향 설정
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f7ff fe13 	bl	80008cc <Motor_Direction_Control>
            Motor_PWM_Control(pwm_num - 50);        // 속도 제어
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <main+0x34c>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	3b32      	subs	r3, #50	@ 0x32
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fdf0 	bl	8000894 <Motor_PWM_Control>
            break;
 8000cb4:	e000      	b.n	8000cb8 <main+0x298>
          default:
            break;
 8000cb6:	bf00      	nop
        }
      }

      uint8_t hello_msg[] = "Completed\r\n";
 8000cb8:	4a37      	ldr	r2, [pc, #220]	@ (8000d98 <main+0x378>)
 8000cba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      HC06_SendData(hello_msg, sizeof(hello_msg) - 1);
 8000cc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc8:	210b      	movs	r1, #11
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f8c0 	bl	8001e50 <HC06_SendData>

        // Set flag to prevent further messages
//        hello_sent = 1;
    }

    if (rc_mode == SELF_DRIVING_MODE )
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <main+0x374>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	f47f aecd 	bne.w	8000a74 <main+0x54>
    {
      current_state = Self_Driving_state();  // Call the function and store its result
 8000cda:	f7ff fe65 	bl	80009a8 <Self_Driving_state>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d9c <main+0x37c>)
 8000ce4:	701a      	strb	r2, [r3, #0]

      switch(current_state){
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <main+0x37c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d077      	beq.n	8000dde <main+0x3be>
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	db79      	blt.n	8000de6 <main+0x3c6>
 8000cf2:	2b52      	cmp	r3, #82	@ 0x52
 8000cf4:	dc77      	bgt.n	8000de6 <main+0x3c6>
 8000cf6:	2b42      	cmp	r3, #66	@ 0x42
 8000cf8:	db75      	blt.n	8000de6 <main+0x3c6>
 8000cfa:	3b42      	subs	r3, #66	@ 0x42
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	d872      	bhi.n	8000de6 <main+0x3c6>
 8000d00:	a201      	add	r2, pc, #4	@ (adr r2, 8000d08 <main+0x2e8>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000da1 	.word	0x08000da1
 8000d0c:	08000de7 	.word	0x08000de7
 8000d10:	08000de7 	.word	0x08000de7
 8000d14:	08000de7 	.word	0x08000de7
 8000d18:	08000d4d 	.word	0x08000d4d
 8000d1c:	08000de7 	.word	0x08000de7
 8000d20:	08000de7 	.word	0x08000de7
 8000d24:	08000de7 	.word	0x08000de7
 8000d28:	08000de7 	.word	0x08000de7
 8000d2c:	08000de7 	.word	0x08000de7
 8000d30:	08000dc9 	.word	0x08000dc9
 8000d34:	08000de7 	.word	0x08000de7
 8000d38:	08000de7 	.word	0x08000de7
 8000d3c:	08000de7 	.word	0x08000de7
 8000d40:	08000de7 	.word	0x08000de7
 8000d44:	08000de7 	.word	0x08000de7
 8000d48:	08000db3 	.word	0x08000db3
        case FORWARD:        // 전진
          // Perform action for turning left
          Motor_Direction_Control(FORWARD_DIR);  // 방향 설정
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fdbd 	bl	80008cc <Motor_Direction_Control>
          Motor_PWM_Control(pwm_num);        // 속도 제어
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <main+0x34c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd9c 	bl	8000894 <Motor_PWM_Control>
          break;
 8000d5c:	e044      	b.n	8000de8 <main+0x3c8>
 8000d5e:	bf00      	nop
 8000d60:	200000bc 	.word	0x200000bc
 8000d64:	20000280 	.word	0x20000280
 8000d68:	2000015c 	.word	0x2000015c
 8000d6c:	200000b8 	.word	0x200000b8
 8000d70:	200000c6 	.word	0x200000c6
 8000d74:	200000c5 	.word	0x200000c5
 8000d78:	080064a8 	.word	0x080064a8
 8000d7c:	200002c8 	.word	0x200002c8
 8000d80:	200000be 	.word	0x200000be
 8000d84:	200000c0 	.word	0x200000c0
 8000d88:	200000c2 	.word	0x200000c2
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	200000ba 	.word	0x200000ba
 8000d94:	200000bb 	.word	0x200000bb
 8000d98:	080064c4 	.word	0x080064c4
 8000d9c:	200000c4 	.word	0x200000c4
        case BACKWARD:       // 후진
          // Perform action for turning right
          Motor_Direction_Control(BACKWARD_DIR);  // 방향 설정
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fd93 	bl	80008cc <Motor_Direction_Control>
          Motor_PWM_Control(pwm_num);        // 속도 제어
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <main+0x3cc>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd72 	bl	8000894 <Motor_PWM_Control>
          break;
 8000db0:	e01a      	b.n	8000de8 <main+0x3c8>
        case RIGHT:        //우회전
          // Perform action for turning left
          Motor_Direction_Control(RIGHT_TURN);  // 방향 설정
 8000db2:	2002      	movs	r0, #2
 8000db4:	f7ff fd8a 	bl	80008cc <Motor_Direction_Control>
          Motor_PWM_Control(pwm_num - 50);        // 속도 제어
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <main+0x3cc>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	3b32      	subs	r3, #50	@ 0x32
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd67 	bl	8000894 <Motor_PWM_Control>
          break;
 8000dc6:	e00f      	b.n	8000de8 <main+0x3c8>
        case LEFT:       // 좌회전
          // Perform action for turning right
          Motor_Direction_Control(LEFT_TURN);  // 방향 설정
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f7ff fd7f 	bl	80008cc <Motor_Direction_Control>
          Motor_PWM_Control(pwm_num - 50);        // 속도 제어
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <main+0x3cc>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	3b32      	subs	r3, #50	@ 0x32
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd5c 	bl	8000894 <Motor_PWM_Control>
          break;
 8000ddc:	e004      	b.n	8000de8 <main+0x3c8>
        case BREAKING:
          Motor_PWM_Control(0);        // 브레이크
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fd58 	bl	8000894 <Motor_PWM_Control>
          break;
 8000de4:	e000      	b.n	8000de8 <main+0x3c8>
        default:
          break;
 8000de6:	bf00      	nop
    DHT11_Read(&temperature, &humidity);  // DHT11 센서 읽기
 8000de8:	e644      	b.n	8000a74 <main+0x54>
 8000dea:	bf00      	nop
 8000dec:	200000b8 	.word	0x200000b8

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	@ 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2230      	movs	r2, #48	@ 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fec6 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <SystemClock_Config+0xc8>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <SystemClock_Config+0xc8>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e64:	2364      	movs	r3, #100	@ 0x64
 8000e66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fd35 	bl	80028e4 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e80:	f000 f81e 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 ff97 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eac:	f000 f808 	bl	8000ec0 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	@ 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <Error_Handler+0x8>

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f001 f919 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f82:	f002 fd5f 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000015c 	.word	0x2000015c

08000f90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f96:	f002 fd55 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001a4 	.word	0x200001a4

08000fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <USART1_IRQHandler+0x10>)
 8000faa:	f003 fe7b 	bl	8004ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000238 	.word	0x20000238

08000fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	f003 fe71 	bl	8004ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000280 	.word	0x20000280

08000fcc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM5_IRQHandler+0x10>)
 8000fd2:	f002 fd37 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000114 	.word	0x20000114

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f004 fdc6 	bl	8005ba0 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200000c8 	.word	0x200000c8
 8001048:	200004a8 	.word	0x200004a8

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a0:	4b32      	ldr	r3, [pc, #200]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010a2:	4a33      	ldr	r2, [pc, #204]	@ (8001170 <MX_TIM3_Init+0x100>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80010a6:	4b31      	ldr	r3, [pc, #196]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010a8:	2263      	movs	r2, #99	@ 0x63
 80010aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c6:	4829      	ldr	r0, [pc, #164]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010c8:	f002 f994 	bl	80033f4 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010d2:	f7ff fef5 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4822      	ldr	r0, [pc, #136]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010e4:	f002 fefc 	bl	8003ee0 <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010ee:	f7ff fee7 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010f2:	481e      	ldr	r0, [pc, #120]	@ (800116c <MX_TIM3_Init+0xfc>)
 80010f4:	f002 fa28 	bl	8003548 <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010fe:	f7ff fedf 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4619      	mov	r1, r3
 8001110:	4816      	ldr	r0, [pc, #88]	@ (800116c <MX_TIM3_Init+0xfc>)
 8001112:	f003 fc0f 	bl	8004934 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800111c:	f7ff fed0 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <MX_TIM3_Init+0xfc>)
 8001138:	f002 fe10 	bl	8003d5c <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001142:	f7ff febd 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2204      	movs	r2, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	@ (800116c <MX_TIM3_Init+0xfc>)
 800114e:	f002 fe05 	bl	8003d5c <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001158:	f7ff feb2 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <MX_TIM3_Init+0xfc>)
 800115e:	f000 fa03 	bl	8001568 <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3738      	adds	r7, #56	@ 0x38
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000cc 	.word	0x200000cc
 8001170:	40000400 	.word	0x40000400

08001174 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001250 <MX_TIM5_Init+0xdc>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80011a4:	4b29      	ldr	r3, [pc, #164]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011a6:	2263      	movs	r2, #99	@ 0x63
 80011a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011c4:	4821      	ldr	r0, [pc, #132]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011c6:	f002 f915 	bl	80033f4 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80011d0:	f7ff fe76 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4619      	mov	r1, r3
 80011e0:	481a      	ldr	r0, [pc, #104]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011e2:	f002 fe7d 	bl	8003ee0 <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f7ff fe68 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80011f0:	4816      	ldr	r0, [pc, #88]	@ (800124c <MX_TIM5_Init+0xd8>)
 80011f2:	f002 fab3 	bl	800375c <HAL_TIM_IC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f7ff fe60 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480f      	ldr	r0, [pc, #60]	@ (800124c <MX_TIM5_Init+0xd8>)
 8001210:	f003 fb90 	bl	8004934 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800121a:	f7ff fe51 	bl	8000ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_TIM5_Init+0xd8>)
 8001236:	f002 fcf5 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001240:	f7ff fe3e 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000114 	.word	0x20000114
 8001250:	40000c00 	.word	0x40000c00

08001254 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_TIM10_Init+0x88>)
 8001268:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <MX_TIM10_Init+0x8c>)
 800126a:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_TIM10_Init+0x88>)
 800126e:	2263      	movs	r2, #99	@ 0x63
 8001270:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_TIM10_Init+0x88>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_TIM10_Init+0x88>)
 800127a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_TIM10_Init+0x88>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_TIM10_Init+0x88>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <MX_TIM10_Init+0x88>)
 800128e:	f002 f8b1 	bl	80033f4 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001298:	f7ff fe12 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <MX_TIM10_Init+0x88>)
 800129e:	f002 fa5d 	bl	800375c <HAL_TIM_IC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 80012a8:	f7ff fe0a 	bl	8000ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <MX_TIM10_Init+0x88>)
 80012c4:	f002 fcae 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 80012ce:	f7ff fdf7 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000015c 	.word	0x2000015c
 80012e0:	40014400 	.word	0x40014400

080012e4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM11_Init+0x88>)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <MX_TIM11_Init+0x8c>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_TIM11_Init+0x88>)
 80012fe:	2263      	movs	r2, #99	@ 0x63
 8001300:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM11_Init+0x88>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_TIM11_Init+0x88>)
 800130a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_TIM11_Init+0x88>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM11_Init+0x88>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	@ (800136c <MX_TIM11_Init+0x88>)
 800131e:	f002 f869 	bl	80033f4 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8001328:	f7ff fdca 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800132c:	480f      	ldr	r0, [pc, #60]	@ (800136c <MX_TIM11_Init+0x88>)
 800132e:	f002 fa15 	bl	800375c <HAL_TIM_IC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8001338:	f7ff fdc2 	bl	8000ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001340:	2301      	movs	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM11_Init+0x88>)
 8001354:	f002 fc66 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 800135e:	f7ff fdaf 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001a4 	.word	0x200001a4
 8001370:	40014800 	.word	0x40014800

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	@ 0x50
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
  if(tim_baseHandle->Instance==TIM3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6a      	ldr	r2, [pc, #424]	@ (800154c <HAL_TIM_Base_MspInit+0x1d8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d10e      	bne.n	80013c6 <HAL_TIM_Base_MspInit+0x52>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a67      	ldr	r2, [pc, #412]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b65      	ldr	r3, [pc, #404]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80013c4:	e0bd      	b.n	8001542 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM5)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a62      	ldr	r2, [pc, #392]	@ (8001554 <HAL_TIM_Base_MspInit+0x1e0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d134      	bne.n	800143a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	4b57      	ldr	r3, [pc, #348]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4a56      	ldr	r2, [pc, #344]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fc:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001408:	2301      	movs	r3, #1
 800140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001418:	2302      	movs	r3, #2
 800141a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001420:	4619      	mov	r1, r3
 8001422:	484d      	ldr	r0, [pc, #308]	@ (8001558 <HAL_TIM_Base_MspInit+0x1e4>)
 8001424:	f001 f8a8 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2032      	movs	r0, #50	@ 0x32
 800142e:	f000 ffda 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001432:	2032      	movs	r0, #50	@ 0x32
 8001434:	f000 fff3 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001438:	e083      	b.n	8001542 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM10)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a47      	ldr	r2, [pc, #284]	@ (800155c <HAL_TIM_Base_MspInit+0x1e8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d135      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144c:	4a40      	ldr	r2, [pc, #256]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 800144e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001452:	6453      	str	r3, [r2, #68]	@ 0x44
 8001454:	4b3e      	ldr	r3, [pc, #248]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4a39      	ldr	r2, [pc, #228]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800147c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001480:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800148e:	2303      	movs	r3, #3
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001496:	4619      	mov	r1, r3
 8001498:	4831      	ldr	r0, [pc, #196]	@ (8001560 <HAL_TIM_Base_MspInit+0x1ec>)
 800149a:	f001 f86d 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2019      	movs	r0, #25
 80014a4:	f000 ff9f 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014a8:	2019      	movs	r0, #25
 80014aa:	f000 ffb8 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 80014ae:	e048      	b.n	8001542 <HAL_TIM_Base_MspInit+0x1ce>
  else if(tim_baseHandle->Instance==TIM11)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001564 <HAL_TIM_Base_MspInit+0x1f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d143      	bne.n	8001542 <HAL_TIM_Base_MspInit+0x1ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014ba:	2302      	movs	r3, #2
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fea3 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_TIM_Base_MspInit+0x164>
      Error_Handler();
 80014d4:	f7ff fcf4 	bl	8000ec0 <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6313      	str	r3, [r2, #48]	@ 0x30
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_TIM_Base_MspInit+0x1dc>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001522:	2303      	movs	r3, #3
 8001524:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_TIM_Base_MspInit+0x1ec>)
 800152e:	f001 f823 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	201a      	movs	r0, #26
 8001538:	f000 ff55 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800153c:	201a      	movs	r0, #26
 800153e:	f000 ff6e 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40000400 	.word	0x40000400
 8001550:	40023800 	.word	0x40023800
 8001554:	40000c00 	.word	0x40000c00
 8001558:	40020000 	.word	0x40020000
 800155c:	40014400 	.word	0x40014400
 8001560:	40020400 	.word	0x40020400
 8001564:	40014800 	.word	0x40014800

08001568 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_TIM_MspPostInit+0x68>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d11d      	bne.n	80015c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_TIM_MspPostInit+0x6c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_TIM_MspPostInit+0x6c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_TIM_MspPostInit+0x6c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a6:	23c0      	movs	r3, #192	@ 0xc0
 80015a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_TIM_MspPostInit+0x70>)
 80015c2:	f000 ffd9 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <updateEnhancedFilter>:
static uint8_t unstable_count1 = 0;

#define MAX_UNSTABLE_THRESHOLD 3
#define MAX_DISTANCE_VARIATION 20  // 허용 가능한 최대 거리 변화 (cm)

uint16_t updateEnhancedFilter(EnhancedFilter* filter, uint16_t newValue) {
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
    // 0 값이나 비정상적인 값 제외
    if (newValue == 0 || newValue > 400) {
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <updateEnhancedFilter+0x1a>
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015f4:	d902      	bls.n	80015fc <updateEnhancedFilter+0x20>
        return filter->lastStableValue;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	89db      	ldrh	r3, [r3, #14]
 80015fa:	e08a      	b.n	8001712 <updateEnhancedFilter+0x136>
    }

    // 마지막 안정값과의 차이 계산
    uint16_t diff = (newValue > filter->lastStableValue) 
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	89db      	ldrh	r3, [r3, #14]
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	429a      	cmp	r2, r3
 8001604:	d905      	bls.n	8001612 <updateEnhancedFilter+0x36>
        ? (newValue - filter->lastStableValue) 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	89db      	ldrh	r3, [r3, #14]
    uint16_t diff = (newValue > filter->lastStableValue) 
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b29b      	uxth	r3, r3
 8001610:	e004      	b.n	800161c <updateEnhancedFilter+0x40>
        : (filter->lastStableValue - newValue);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	89da      	ldrh	r2, [r3, #14]
    uint16_t diff = (newValue > filter->lastStableValue) 
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	81fb      	strh	r3, [r7, #14]

    // 급격한 변화 감지
    if (diff > MAX_ALLOWED_DIFF) {
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	2b14      	cmp	r3, #20
 8001622:	d912      	bls.n	800164a <updateEnhancedFilter+0x6e>
        // 안정값 유지
        filter->stableCounter++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7c1b      	ldrb	r3, [r3, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	741a      	strb	r2, [r3, #16]
        
        // 연속 3회 이상 급격한 변화면 새 값 수용
        if (filter->stableCounter >= 3) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7c1b      	ldrb	r3, [r3, #16]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d905      	bls.n	8001644 <updateEnhancedFilter+0x68>
            filter->lastStableValue = newValue;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	81da      	strh	r2, [r3, #14]
            filter->stableCounter = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	741a      	strb	r2, [r3, #16]
        }
        
        return filter->lastStableValue;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	89db      	ldrh	r3, [r3, #14]
 8001648:	e063      	b.n	8001712 <updateEnhancedFilter+0x136>
    }

    // 안정된 값으로 인정
    filter->stableCounter = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	741a      	strb	r2, [r3, #16]
    filter->lastStableValue = newValue;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	81da      	strh	r2, [r3, #14]

    // 이동 평균 필터 로직
    if (filter->count < FILTER_SIZE) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7b5b      	ldrb	r3, [r3, #13]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d82c      	bhi.n	80016b8 <updateEnhancedFilter+0xdc>
        filter->buffer[filter->index] = newValue;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	4619      	mov	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        filter->sum += newValue;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	895a      	ldrh	r2, [r3, #10]
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	4413      	add	r3, r2
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	815a      	strh	r2, [r3, #10]
        filter->count++;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b5b      	ldrb	r3, [r3, #13]
 800167e:	3301      	adds	r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	735a      	strb	r2, [r3, #13]
        filter->index = (filter->index + 1) % FILTER_SIZE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7b1b      	ldrb	r3, [r3, #12]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <updateEnhancedFilter+0x144>)
 800168e:	fb83 1302 	smull	r1, r3, r3, r2
 8001692:	1059      	asrs	r1, r3, #1
 8001694:	17d3      	asrs	r3, r2, #31
 8001696:	1ac9      	subs	r1, r1, r3
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	1ad1      	subs	r1, r2, r3
 80016a0:	b2ca      	uxtb	r2, r1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	731a      	strb	r2, [r3, #12]
        return filter->sum / filter->count;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	895b      	ldrh	r3, [r3, #10]
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7b5b      	ldrb	r3, [r3, #13]
 80016b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	e02c      	b.n	8001712 <updateEnhancedFilter+0x136>
    }

    // 오래된 값 제거 및 새 값 추가
    filter->sum = filter->sum - filter->buffer[filter->index] + newValue;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	895a      	ldrh	r2, [r3, #10]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7b1b      	ldrb	r3, [r3, #12]
 80016c0:	4619      	mov	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	815a      	strh	r2, [r3, #10]
    filter->buffer[filter->index] = newValue;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7b1b      	ldrb	r3, [r3, #12]
 80016da:	4619      	mov	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    filter->index = (filter->index + 1) % FILTER_SIZE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b1b      	ldrb	r3, [r3, #12]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <updateEnhancedFilter+0x144>)
 80016ec:	fb83 1302 	smull	r1, r3, r3, r2
 80016f0:	1059      	asrs	r1, r3, #1
 80016f2:	17d3      	asrs	r3, r2, #31
 80016f4:	1ac9      	subs	r1, r1, r3
 80016f6:	460b      	mov	r3, r1
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	1ad1      	subs	r1, r2, r3
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	731a      	strb	r2, [r3, #12]

    return filter->sum / FILTER_SIZE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	895b      	ldrh	r3, [r3, #10]
 8001708:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <updateEnhancedFilter+0x148>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	b29b      	uxth	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	66666667 	.word	0x66666667
 8001724:	cccccccd 	.word	0xcccccccd

08001728 <Get_Distance1>:
    flFilter.index = (flFilter.index + 1) % FL_FILTER_SIZE;

    return flFilter.sum / FL_FILTER_SIZE;
}

uint16_t Get_Distance1(void) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
    // 0 또는 비정상적인 값 제외
    if (distance1 == 0 || distance1 > 300) {
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <Get_Distance1+0x9c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <Get_Distance1+0x18>
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <Get_Distance1+0x9c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800173e:	d902      	bls.n	8001746 <Get_Distance1+0x1e>
        return stable_distance1;
 8001740:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <Get_Distance1+0xa0>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	e037      	b.n	80017b6 <Get_Distance1+0x8e>
    }

    // 첫 측정이거나 이전 안정값이 없는 경우
    if (stable_distance1 == 0) {
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <Get_Distance1+0xa0>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <Get_Distance1+0x34>
        stable_distance1 = distance1;
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <Get_Distance1+0x9c>)
 8001750:	881a      	ldrh	r2, [r3, #0]
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <Get_Distance1+0xa0>)
 8001754:	801a      	strh	r2, [r3, #0]
        return stable_distance1;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <Get_Distance1+0xa0>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	e02c      	b.n	80017b6 <Get_Distance1+0x8e>
    }

    // 거리 변화 계산
    int16_t distance_diff = abs((int16_t)distance1 - (int16_t)stable_distance1);
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <Get_Distance1+0x9c>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b21b      	sxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <Get_Distance1+0xa0>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b21b      	sxth	r3, r3
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bfb8      	it	lt
 8001770:	425b      	neglt	r3, r3
 8001772:	80fb      	strh	r3, [r7, #6]

    // 거리 변화가 허용 범위 내인 경우
    if (distance_diff <= MAX_DISTANCE_VARIATION) {
 8001774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001778:	2b14      	cmp	r3, #20
 800177a:	dc09      	bgt.n	8001790 <Get_Distance1+0x68>
        stable_distance1 = distance1;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <Get_Distance1+0x9c>)
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <Get_Distance1+0xa0>)
 8001782:	801a      	strh	r2, [r3, #0]
        unstable_count1 = 0;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <Get_Distance1+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
        return stable_distance1;
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <Get_Distance1+0xa0>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	e012      	b.n	80017b6 <Get_Distance1+0x8e>
    }

    // 거리 변화가 큰 경우
    unstable_count1++;
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <Get_Distance1+0xa4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <Get_Distance1+0xa4>)
 800179a:	701a      	strb	r2, [r3, #0]

    // 연속 3회 이상 불안정하면 값 업데이트
    if (unstable_count1 >= MAX_UNSTABLE_THRESHOLD) {
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <Get_Distance1+0xa4>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d906      	bls.n	80017b2 <Get_Distance1+0x8a>
        stable_distance1 = distance1;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <Get_Distance1+0x9c>)
 80017a6:	881a      	ldrh	r2, [r3, #0]
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <Get_Distance1+0xa0>)
 80017aa:	801a      	strh	r2, [r3, #0]
        unstable_count1 = 0;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <Get_Distance1+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    }

    return stable_distance1;
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <Get_Distance1+0xa0>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200001f4 	.word	0x200001f4
 80017c8:	20000232 	.word	0x20000232
 80017cc:	20000234 	.word	0x20000234

080017d0 <Get_Distance2>:

uint16_t Get_Distance2(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    return updateEnhancedFilter(&filter2, distance2);
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <Get_Distance2+0x18>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4804      	ldr	r0, [pc, #16]	@ (80017ec <Get_Distance2+0x1c>)
 80017dc:	f7ff fefe 	bl	80015dc <updateEnhancedFilter>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200001fe 	.word	0x200001fe
 80017ec:	2000020c 	.word	0x2000020c

080017f0 <Get_Distance3>:

uint16_t Get_Distance3(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    return updateEnhancedFilter(&filter3, distance3);
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <Get_Distance3+0x18>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4804      	ldr	r0, [pc, #16]	@ (800180c <Get_Distance3+0x1c>)
 80017fc:	f7ff feee 	bl	80015dc <updateEnhancedFilter>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000208 	.word	0x20000208
 800180c:	20000220 	.word	0x20000220

08001810 <HCSR04_Init>:

/* Functions ---------------------------------------------------------*/
void HCSR04_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);   // 첫 번째 초음파 센서
 8001814:	2100      	movs	r1, #0
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HCSR04_Init+0x20>)
 8001818:	f001 fffa 	bl	8003810 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);  // 두 번째 초음파 센서
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HCSR04_Init+0x24>)
 8001820:	f001 fff6 	bl	8003810 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);  // 세 번째 초음파 센서
 8001824:	2100      	movs	r1, #0
 8001826:	4804      	ldr	r0, [pc, #16]	@ (8001838 <HCSR04_Init+0x28>)
 8001828:	f001 fff2 	bl	8003810 <HAL_TIM_IC_Start_IT>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000114 	.word	0x20000114
 8001834:	2000015c 	.word	0x2000015c
 8001838:	200001a4 	.word	0x200001a4

0800183c <HCSR04_Read>:

void HCSR04_Read(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4828      	ldr	r0, [pc, #160]	@ (80018e8 <HCSR04_Read+0xac>)
 8001846:	f001 f833 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(2);
 800184a:	2002      	movs	r0, #2
 800184c:	f7fe fe98 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2120      	movs	r1, #32
 8001854:	4824      	ldr	r0, [pc, #144]	@ (80018e8 <HCSR04_Read+0xac>)
 8001856:	f001 f82b 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(10);
 800185a:	200a      	movs	r0, #10
 800185c:	f7fe fe90 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2120      	movs	r1, #32
 8001864:	4820      	ldr	r0, [pc, #128]	@ (80018e8 <HCSR04_Read+0xac>)
 8001866:	f001 f823 	bl	80028b0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2140      	movs	r1, #64	@ 0x40
 800186e:	481f      	ldr	r0, [pc, #124]	@ (80018ec <HCSR04_Read+0xb0>)
 8001870:	f001 f81e 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(2);
 8001874:	2002      	movs	r0, #2
 8001876:	f7fe fe83 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	481b      	ldr	r0, [pc, #108]	@ (80018ec <HCSR04_Read+0xb0>)
 8001880:	f001 f816 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(10);
 8001884:	200a      	movs	r0, #10
 8001886:	f7fe fe7b 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2140      	movs	r1, #64	@ 0x40
 800188e:	4817      	ldr	r0, [pc, #92]	@ (80018ec <HCSR04_Read+0xb0>)
 8001890:	f001 f80e 	bl	80028b0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(TRIG_PORT3, TRIG_PIN3, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	4814      	ldr	r0, [pc, #80]	@ (80018ec <HCSR04_Read+0xb0>)
 800189a:	f001 f809 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(2);
 800189e:	2002      	movs	r0, #2
 80018a0:	f7fe fe6e 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT3, TRIG_PIN3, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	4810      	ldr	r0, [pc, #64]	@ (80018ec <HCSR04_Read+0xb0>)
 80018aa:	f001 f801 	bl	80028b0 <HAL_GPIO_WritePin>
    delay_us(10);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f7fe fe66 	bl	8000580 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT3, TRIG_PIN3, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <HCSR04_Read+0xb0>)
 80018ba:	f000 fff9 	bl	80028b0 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim5, TIM_CHANNEL_1);
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HCSR04_Read+0xb4>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HCSR04_Read+0xb4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d2      	ldr	r2, [r2, #12]
 80018c8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim10, TIM_CHANNEL_1);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HCSR04_Read+0xb8>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HCSR04_Read+0xb8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_IT(&htim11, TIM_CHANNEL_1);
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HCSR04_Read+0xbc>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HCSR04_Read+0xbc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68d2      	ldr	r2, [r2, #12]
 80018e0:	60da      	str	r2, [r3, #12]
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020400 	.word	0x40020400
 80018f0:	20000114 	.word	0x20000114
 80018f4:	2000015c 	.word	0x2000015c
 80018f8:	200001a4 	.word	0x200001a4

080018fc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7f1b      	ldrb	r3, [r3, #28]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 8152 	bne.w	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
        if (htim == &htim5) {  // 첫 번째 센서
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a85      	ldr	r2, [pc, #532]	@ (8001b28 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d160      	bne.n	80019d8 <HAL_TIM_IC_CaptureCallback+0xdc>
            if (captureFlag1 == 0) {
 8001916:	4b85      	ldr	r3, [pc, #532]	@ (8001b2c <HAL_TIM_IC_CaptureCallback+0x230>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11b      	bne.n	8001956 <HAL_TIM_IC_CaptureCallback+0x5a>
                IC_ValueRising1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f002 fba5 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_TIM_IC_CaptureCallback+0x234>)
 800192c:	801a      	strh	r2, [r3, #0]
                captureFlag1 = 1;
 800192e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b2c <HAL_TIM_IC_CaptureCallback+0x230>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020a 	bic.w	r2, r2, #10
 8001942:	621a      	str	r2, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0202 	orr.w	r2, r2, #2
 8001952:	621a      	str	r2, [r3, #32]
                distance3 = captureTime3 / 58;
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            }
        }
    }
}
 8001954:	e12d      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
            } else if (captureFlag1 == 1) {
 8001956:	4b75      	ldr	r3, [pc, #468]	@ (8001b2c <HAL_TIM_IC_CaptureCallback+0x230>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 8129 	bne.w	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
                IC_ValueFalling1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001960:	2100      	movs	r1, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f002 fb84 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b71      	ldr	r3, [pc, #452]	@ (8001b34 <HAL_TIM_IC_CaptureCallback+0x238>)
 800196e:	801a      	strh	r2, [r3, #0]
                captureFlag1 = 0;
 8001970:	4b6e      	ldr	r3, [pc, #440]	@ (8001b2c <HAL_TIM_IC_CaptureCallback+0x230>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
                if (IC_ValueFalling1 > IC_ValueRising1) {
 8001976:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b30 <HAL_TIM_IC_CaptureCallback+0x234>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d908      	bls.n	8001994 <HAL_TIM_IC_CaptureCallback+0x98>
                    captureTime1 = IC_ValueFalling1 - IC_ValueRising1;
 8001982:	4b6c      	ldr	r3, [pc, #432]	@ (8001b34 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	4b6a      	ldr	r3, [pc, #424]	@ (8001b30 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	e009      	b.n	80019a8 <HAL_TIM_IC_CaptureCallback+0xac>
                    captureTime1 = (0xFFFF - IC_ValueRising1) + IC_ValueFalling1;
 8001994:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	4b65      	ldr	r3, [pc, #404]	@ (8001b30 <HAL_TIM_IC_CaptureCallback+0x234>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b64      	ldr	r3, [pc, #400]	@ (8001b38 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80019a6:	801a      	strh	r2, [r3, #0]
                distance1 = captureTime1 / 58;
 80019a8:	4b63      	ldr	r3, [pc, #396]	@ (8001b38 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	4a63      	ldr	r2, [pc, #396]	@ (8001b3c <HAL_TIM_IC_CaptureCallback+0x240>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b62      	ldr	r3, [pc, #392]	@ (8001b40 <HAL_TIM_IC_CaptureCallback+0x244>)
 80019b8:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 020a 	bic.w	r2, r2, #10
 80019c8:	621a      	str	r2, [r3, #32]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a12      	ldr	r2, [r2, #32]
 80019d4:	621a      	str	r2, [r3, #32]
}
 80019d6:	e0ec      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
        else if (htim == &htim10) {  // 두 번째 센서
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_TIM_IC_CaptureCallback+0x248>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d160      	bne.n	8001aa2 <HAL_TIM_IC_CaptureCallback+0x1a6>
            if (captureFlag2 == 0) {
 80019e0:	4b59      	ldr	r3, [pc, #356]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11b      	bne.n	8001a20 <HAL_TIM_IC_CaptureCallback+0x124>
                IC_ValueRising2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80019e8:	2100      	movs	r1, #0
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f002 fb40 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x250>)
 80019f6:	801a      	strh	r2, [r3, #0]
                captureFlag2 = 1;
 80019f8:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 020a 	bic.w	r2, r2, #10
 8001a0c:	621a      	str	r2, [r3, #32]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0202 	orr.w	r2, r2, #2
 8001a1c:	621a      	str	r2, [r3, #32]
}
 8001a1e:	e0c8      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
            } else if (captureFlag2 == 1) {
 8001a20:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 80c4 	bne.w	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
                IC_ValueFalling2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f002 fb1f 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b46      	ldr	r3, [pc, #280]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001a38:	801a      	strh	r2, [r3, #0]
                captureFlag2 = 0;
 8001a3a:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
                if (IC_ValueFalling2 > IC_ValueRising2) {
 8001a40:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001a42:	881a      	ldrh	r2, [r3, #0]
 8001a44:	4b41      	ldr	r3, [pc, #260]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d908      	bls.n	8001a5e <HAL_TIM_IC_CaptureCallback+0x162>
                    captureTime2 = IC_ValueFalling2 - IC_ValueRising2;
 8001a4c:	4b40      	ldr	r3, [pc, #256]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b3e      	ldr	r3, [pc, #248]	@ (8001b54 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a5a:	801a      	strh	r2, [r3, #0]
 8001a5c:	e009      	b.n	8001a72 <HAL_TIM_IC_CaptureCallback+0x176>
                    captureTime2 = (0xFFFF - IC_ValueRising2) + IC_ValueFalling2;
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b50 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a70:	801a      	strh	r2, [r3, #0]
                distance2 = captureTime2 / 58;
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	4a31      	ldr	r2, [pc, #196]	@ (8001b3c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001a82:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020a 	bic.w	r2, r2, #10
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a12      	ldr	r2, [r2, #32]
 8001a9e:	621a      	str	r2, [r3, #32]
}
 8001aa0:	e087      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
        else if (htim == &htim11) {  // 세 번째 센서
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b5c <HAL_TIM_IC_CaptureCallback+0x260>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 8083 	bne.w	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
            if (captureFlag3 == 0) {
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11b      	bne.n	8001aec <HAL_TIM_IC_CaptureCallback+0x1f0>
                IC_ValueRising3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f002 fada 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001ac2:	801a      	strh	r2, [r3, #0]
                captureFlag3 = 1;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020a 	bic.w	r2, r2, #10
 8001ad8:	621a      	str	r2, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0202 	orr.w	r2, r2, #2
 8001ae8:	621a      	str	r2, [r3, #32]
}
 8001aea:	e062      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
            } else if (captureFlag3 == 1) {
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d15e      	bne.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x2b6>
                IC_ValueFalling3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001af4:	2100      	movs	r1, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f002 faba 	bl	8004070 <HAL_TIM_ReadCapturedValue>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001b02:	801a      	strh	r2, [r3, #0]
                captureFlag3 = 0;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
                if (IC_ValueFalling3 > IC_ValueRising3) {
 8001b0a:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d92c      	bls.n	8001b70 <HAL_TIM_IC_CaptureCallback+0x274>
                    captureTime3 = IC_ValueFalling3 - IC_ValueRising3;
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_TIM_IC_CaptureCallback+0x270>)
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	e02d      	b.n	8001b84 <HAL_TIM_IC_CaptureCallback+0x288>
 8001b28:	20000114 	.word	0x20000114
 8001b2c:	200001f2 	.word	0x200001f2
 8001b30:	200001ec 	.word	0x200001ec
 8001b34:	200001ee 	.word	0x200001ee
 8001b38:	200001f0 	.word	0x200001f0
 8001b3c:	8d3dcb09 	.word	0x8d3dcb09
 8001b40:	200001f4 	.word	0x200001f4
 8001b44:	2000015c 	.word	0x2000015c
 8001b48:	200001fc 	.word	0x200001fc
 8001b4c:	200001f6 	.word	0x200001f6
 8001b50:	200001f8 	.word	0x200001f8
 8001b54:	200001fa 	.word	0x200001fa
 8001b58:	200001fe 	.word	0x200001fe
 8001b5c:	200001a4 	.word	0x200001a4
 8001b60:	20000206 	.word	0x20000206
 8001b64:	20000200 	.word	0x20000200
 8001b68:	20000202 	.word	0x20000202
 8001b6c:	20000204 	.word	0x20000204
                    captureTime3 = (0xFFFF - IC_ValueRising3) + IC_ValueFalling3;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8001b82:	801a      	strh	r2, [r3, #0]
                distance3 = captureTime3 / 58;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8001b94:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 020a 	bic.w	r2, r2, #10
 8001ba4:	621a      	str	r2, [r3, #32]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a12      	ldr	r2, [r2, #32]
 8001bb0:	621a      	str	r2, [r3, #32]
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000202 	.word	0x20000202
 8001bc0:	20000200 	.word	0x20000200
 8001bc4:	20000204 	.word	0x20000204
 8001bc8:	8d3dcb09 	.word	0x8d3dcb09
 8001bcc:	20000208 	.word	0x20000208

08001bd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART1_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c08:	f002 ff16 	bl	8004a38 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f7ff f955 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000238 	.word	0x20000238
 8001c20:	40011000 	.word	0x40011000

08001c24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_USART2_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c5c:	f002 feec 	bl	8004a38 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f7ff f92b 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000280 	.word	0x20000280
 8001c74:	40004400 	.word	0x40004400

08001c78 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART6_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001cb0:	f002 fec2 	bl	8004a38 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f7ff f901 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002c8 	.word	0x200002c8
 8001cc8:	40011400 	.word	0x40011400

08001ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	@ 0x38
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a53      	ldr	r2, [pc, #332]	@ (8001e38 <HAL_UART_MspInit+0x16c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d135      	bne.n	8001d5a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	4b52      	ldr	r3, [pc, #328]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a4a      	ldr	r2, [pc, #296]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	483f      	ldr	r0, [pc, #252]	@ (8001e40 <HAL_UART_MspInit+0x174>)
 8001d44:	f000 fc18 	bl	8002578 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2025      	movs	r0, #37	@ 0x25
 8001d4e:	f000 fb4a 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d52:	2025      	movs	r0, #37	@ 0x25
 8001d54:	f000 fb63 	bl	800241e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d58:	e06a      	b.n	8001e30 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a39      	ldr	r2, [pc, #228]	@ (8001e44 <HAL_UART_MspInit+0x178>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d134      	bne.n	8001dce <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d74:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	4a2c      	ldr	r2, [pc, #176]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dac:	2307      	movs	r3, #7
 8001dae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	4822      	ldr	r0, [pc, #136]	@ (8001e40 <HAL_UART_MspInit+0x174>)
 8001db8:	f000 fbde 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2026      	movs	r0, #38	@ 0x26
 8001dc2:	f000 fb10 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dc6:	2026      	movs	r0, #38	@ 0x26
 8001dc8:	f000 fb29 	bl	800241e <HAL_NVIC_EnableIRQ>
}
 8001dcc:	e030      	b.n	8001e30 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_UART_MspInit+0x17c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d12b      	bne.n	8001e30 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001de2:	f043 0320 	orr.w	r3, r3, #32
 8001de6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_UART_MspInit+0x170>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e10:	23c0      	movs	r3, #192	@ 0xc0
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e20:	2308      	movs	r3, #8
 8001e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4808      	ldr	r0, [pc, #32]	@ (8001e4c <HAL_UART_MspInit+0x180>)
 8001e2c:	f000 fba4 	bl	8002578 <HAL_GPIO_Init>
}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	@ 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40011400 	.word	0x40011400
 8001e4c:	40020800 	.word	0x40020800

08001e50 <HC06_SendData>:

uint8_t pwmData;

// Send data via UART with interrupt
void HC06_SendData(uint8_t *data, uint16_t size)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit_IT(&huart1, data, size);
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <HC06_SendData+0x20>)
 8001e64:	f002 fec3 	bl	8004bee <HAL_UART_Transmit_IT>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000238 	.word	0x20000238

08001e74 <HC06_StartReceive>:

// Start interrupt-based receive
void HC06_StartReceive(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    // Reset buffer
    rx_write_index = 0;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HC06_StartReceive+0x30>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
    rx_read_index = 0;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HC06_StartReceive+0x34>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
    rx_data_count = 0;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HC06_StartReceive+0x38>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	801a      	strh	r2, [r3, #0]

    // Start receiving first byte
    HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_write_index], 1);
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HC06_StartReceive+0x30>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HC06_StartReceive+0x3c>)
 8001e94:	4413      	add	r3, r2
 8001e96:	2201      	movs	r2, #1
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <HC06_StartReceive+0x40>)
 8001e9c:	f002 fedd 	bl	8004c5a <HAL_UART_Receive_IT>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000350 	.word	0x20000350
 8001ea8:	20000352 	.word	0x20000352
 8001eac:	20000354 	.word	0x20000354
 8001eb0:	20000310 	.word	0x20000310
 8001eb4:	20000238 	.word	0x20000238

08001eb8 <HC06_DataAvailable>:
// Interrupt callback for UART reception


// Check if data is available
uint8_t HC06_DataAvailable(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
    return (rx_data_count > 0);
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HC06_DataAvailable+0x20>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000354 	.word	0x20000354

08001edc <HC06_GetReceivedData>:

// Retrieve received data
uint16_t HC06_GetReceivedData(uint8_t *data, uint16_t max_size)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
    uint16_t bytes_to_read = (rx_data_count < max_size) ? rx_data_count : max_size;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <HC06_GetReceivedData+0x88>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d903      	bls.n	8001efc <HC06_GetReceivedData+0x20>
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HC06_GetReceivedData+0x88>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	e000      	b.n	8001efe <HC06_GetReceivedData+0x22>
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	81bb      	strh	r3, [r7, #12]

    for (uint16_t i = 0; i < bytes_to_read; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	81fb      	strh	r3, [r7, #14]
 8001f04:	e01a      	b.n	8001f3c <HC06_GetReceivedData+0x60>
    {
        data[i] = rx_buffer[rx_read_index];
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <HC06_GetReceivedData+0x8c>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <HC06_GetReceivedData+0x90>)
 8001f16:	5c52      	ldrb	r2, [r2, r1]
 8001f18:	701a      	strb	r2, [r3, #0]
        rx_read_index = (rx_read_index + 1) % RX_BUFFER_SIZE;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HC06_GetReceivedData+0x8c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	425a      	negs	r2, r3
 8001f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f28:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001f2c:	bf58      	it	pl
 8001f2e:	4253      	negpl	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HC06_GetReceivedData+0x8c>)
 8001f34:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < bytes_to_read; i++)
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	81fb      	strh	r3, [r7, #14]
 8001f3c:	89fa      	ldrh	r2, [r7, #14]
 8001f3e:	89bb      	ldrh	r3, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3e0      	bcc.n	8001f06 <HC06_GetReceivedData+0x2a>
    }

    // Reduce data count
    rx_data_count -= bytes_to_read;
 8001f44:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <HC06_GetReceivedData+0x88>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	89bb      	ldrh	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <HC06_GetReceivedData+0x88>)
 8001f52:	801a      	strh	r2, [r3, #0]

    return bytes_to_read;
 8001f54:	89bb      	ldrh	r3, [r7, #12]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000354 	.word	0x20000354
 8001f68:	20000352 	.word	0x20000352
 8001f6c:	20000310 	.word	0x20000310

08001f70 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a41      	ldr	r2, [pc, #260]	@ (8002084 <HAL_UART_RxCpltCallback+0x114>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d131      	bne.n	8001fe6 <HAL_UART_RxCpltCallback+0x76>
  {
      // Update write index with circular buffer logic
      rx_buffer[rx_write_index] = huart->Instance->DR;  // Read received byte
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	4b3f      	ldr	r3, [pc, #252]	@ (8002088 <HAL_UART_RxCpltCallback+0x118>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	b2c9      	uxtb	r1, r1
 8001f92:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <HAL_UART_RxCpltCallback+0x11c>)
 8001f94:	5499      	strb	r1, [r3, r2]
      rx_write_index = (rx_write_index + 1) % RX_BUFFER_SIZE;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	@ (8002088 <HAL_UART_RxCpltCallback+0x118>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	425a      	negs	r2, r3
 8001fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fa4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001fa8:	bf58      	it	pl
 8001faa:	4253      	negpl	r3, r2
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_UART_RxCpltCallback+0x118>)
 8001fb0:	801a      	strh	r2, [r3, #0]
      rx_data_count++;
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <HAL_UART_RxCpltCallback+0x120>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_UART_RxCpltCallback+0x120>)
 8001fbe:	801a      	strh	r2, [r3, #0]

      // Prevent buffer overflow
      if (rx_data_count >= RX_BUFFER_SIZE)
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <HAL_UART_RxCpltCallback+0x120>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fc8:	d902      	bls.n	8001fd0 <HAL_UART_RxCpltCallback+0x60>
      {
          rx_data_count = RX_BUFFER_SIZE - 1;
 8001fca:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_UART_RxCpltCallback+0x120>)
 8001fcc:	223f      	movs	r2, #63	@ 0x3f
 8001fce:	801a      	strh	r2, [r3, #0]
      }

      // Prepare for next byte
      HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_write_index], 1);
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_UART_RxCpltCallback+0x118>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <HAL_UART_RxCpltCallback+0x11c>)
 8001fda:	4413      	add	r3, r2
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	482c      	ldr	r0, [pc, #176]	@ (8002094 <HAL_UART_RxCpltCallback+0x124>)
 8001fe2:	f002 fe3a 	bl	8004c5a <HAL_UART_Receive_IT>
  }
  if(huart->Instance == USART2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2b      	ldr	r2, [pc, #172]	@ (8002098 <HAL_UART_RxCpltCallback+0x128>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d145      	bne.n	800207c <HAL_UART_RxCpltCallback+0x10c>
  {
    HAL_UART_Receive_IT(&huart2, &ultra_test, 1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	492a      	ldr	r1, [pc, #168]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 8001ff4:	482a      	ldr	r0, [pc, #168]	@ (80020a0 <HAL_UART_RxCpltCallback+0x130>)
 8001ff6:	f002 fe30 	bl	8004c5a <HAL_UART_Receive_IT>
    if(ultra_test == 'a'){    // 전진
 8001ffa:	4b28      	ldr	r3, [pc, #160]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b61      	cmp	r3, #97	@ 0x61
 8002000:	d108      	bne.n	8002014 <HAL_UART_RxCpltCallback+0xa4>
      FL_Dist = 150;
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_UART_RxCpltCallback+0x134>)
 8002004:	2296      	movs	r2, #150	@ 0x96
 8002006:	801a      	strh	r2, [r3, #0]
      FR_Dist = 150;
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_UART_RxCpltCallback+0x138>)
 800200a:	2296      	movs	r2, #150	@ 0x96
 800200c:	801a      	strh	r2, [r3, #0]
      B_Dist = 0;
 800200e:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <HAL_UART_RxCpltCallback+0x13c>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
    }
    if(ultra_test == 'b'){    // 좌회전
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b62      	cmp	r3, #98	@ 0x62
 800201a:	d108      	bne.n	800202e <HAL_UART_RxCpltCallback+0xbe>
      FL_Dist = 150;
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <HAL_UART_RxCpltCallback+0x134>)
 800201e:	2296      	movs	r2, #150	@ 0x96
 8002020:	801a      	strh	r2, [r3, #0]
      FR_Dist = 60;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_UART_RxCpltCallback+0x138>)
 8002024:	223c      	movs	r2, #60	@ 0x3c
 8002026:	801a      	strh	r2, [r3, #0]
      B_Dist = 0;
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_UART_RxCpltCallback+0x13c>)
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
    }
    if(ultra_test == 'c'){    // 우회전
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b63      	cmp	r3, #99	@ 0x63
 8002034:	d108      	bne.n	8002048 <HAL_UART_RxCpltCallback+0xd8>
      FL_Dist = 60;
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_UART_RxCpltCallback+0x134>)
 8002038:	223c      	movs	r2, #60	@ 0x3c
 800203a:	801a      	strh	r2, [r3, #0]
      FR_Dist = 150;
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_UART_RxCpltCallback+0x138>)
 800203e:	2296      	movs	r2, #150	@ 0x96
 8002040:	801a      	strh	r2, [r3, #0]
      B_Dist = 0;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_UART_RxCpltCallback+0x13c>)
 8002044:	2200      	movs	r2, #0
 8002046:	801a      	strh	r2, [r3, #0]
    }
    if(ultra_test == 'd'){    // 후진
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b64      	cmp	r3, #100	@ 0x64
 800204e:	d108      	bne.n	8002062 <HAL_UART_RxCpltCallback+0xf2>
      FL_Dist = 30;
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_UART_RxCpltCallback+0x134>)
 8002052:	221e      	movs	r2, #30
 8002054:	801a      	strh	r2, [r3, #0]
      FR_Dist = 30;
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_UART_RxCpltCallback+0x138>)
 8002058:	221e      	movs	r2, #30
 800205a:	801a      	strh	r2, [r3, #0]
      B_Dist = 80;
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_UART_RxCpltCallback+0x13c>)
 800205e:	2250      	movs	r2, #80	@ 0x50
 8002060:	801a      	strh	r2, [r3, #0]
    }
    if(ultra_test == 'e'){    // 정지
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_UART_RxCpltCallback+0x12c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b65      	cmp	r3, #101	@ 0x65
 8002068:	d108      	bne.n	800207c <HAL_UART_RxCpltCallback+0x10c>
      FL_Dist = 30;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_UART_RxCpltCallback+0x134>)
 800206c:	221e      	movs	r2, #30
 800206e:	801a      	strh	r2, [r3, #0]
      FR_Dist = 30;
 8002070:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_UART_RxCpltCallback+0x138>)
 8002072:	221e      	movs	r2, #30
 8002074:	801a      	strh	r2, [r3, #0]
      B_Dist = 20;
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_UART_RxCpltCallback+0x13c>)
 8002078:	2214      	movs	r2, #20
 800207a:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40011000 	.word	0x40011000
 8002088:	20000350 	.word	0x20000350
 800208c:	20000310 	.word	0x20000310
 8002090:	20000354 	.word	0x20000354
 8002094:	20000238 	.word	0x20000238
 8002098:	40004400 	.word	0x40004400
 800209c:	200000bc 	.word	0x200000bc
 80020a0:	20000280 	.word	0x20000280
 80020a4:	200000be 	.word	0x200000be
 80020a8:	200000c0 	.word	0x200000c0
 80020ac:	200000c2 	.word	0x200000c2

080020b0 <Reset_Handler>:
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e8 <LoopFillZerobss+0xe>
 80020b4:	f7fe ffca 	bl	800104c <SystemInit>
 80020b8:	480c      	ldr	r0, [pc, #48]	@ (80020ec <LoopFillZerobss+0x12>)
 80020ba:	490d      	ldr	r1, [pc, #52]	@ (80020f0 <LoopFillZerobss+0x16>)
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <LoopFillZerobss+0x1a>)
 80020be:	2300      	movs	r3, #0
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:
 80020c2:	58d4      	ldr	r4, [r2, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:
 80020c8:	18c4      	adds	r4, r0, r3
 80020ca:	428c      	cmp	r4, r1
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <LoopFillZerobss+0x1e>)
 80020d0:	4c0a      	ldr	r4, [pc, #40]	@ (80020fc <LoopFillZerobss+0x22>)
 80020d2:	2300      	movs	r3, #0
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:
 80020da:	42a2      	cmp	r2, r4
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>
 80020de:	f003 fd65 	bl	8005bac <__libc_init_array>
 80020e2:	f7fe fc9d 	bl	8000a20 <main>
 80020e6:	4770      	bx	lr
 80020e8:	20020000 	.word	0x20020000
 80020ec:	20000000 	.word	0x20000000
 80020f0:	2000005c 	.word	0x2000005c
 80020f4:	0800652c 	.word	0x0800652c
 80020f8:	2000005c 	.word	0x2000005c
 80020fc:	200004a4 	.word	0x200004a4

08002100 <ADC_IRQHandler>:
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <HAL_Init+0x40>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_Init+0x40>)
 800211a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <HAL_Init+0x40>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f94f 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7fe fec8 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f967 	bl	800243a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f92f 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000358 	.word	0x20000358

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000358 	.word	0x20000358

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	@ (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	@ (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	@ (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	@ 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff feb6 	bl	80021d0 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e052      	b.n	800252a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0216 	bic.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_DMA_Abort+0x62>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e013      	b.n	80024fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff fe7b 	bl	80021d0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d90c      	bls.n	80024fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e015      	b.n	800252a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e4      	bne.n	80024d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	223f      	movs	r2, #63	@ 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00c      	b.n	800256a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e159      	b.n	8002848 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8148 	bne.w	8002842 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a2 	beq.w	8002842 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800270c:	6453      	str	r3, [r2, #68]	@ 0x44
 800270e:	4b54      	ldr	r3, [pc, #336]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_GPIO_Init+0x2ec>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a49      	ldr	r2, [pc, #292]	@ (8002868 <HAL_GPIO_Init+0x2f0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x202>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a48      	ldr	r2, [pc, #288]	@ (800286c <HAL_GPIO_Init+0x2f4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x1fe>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <HAL_GPIO_Init+0x2f8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x1fa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a46      	ldr	r2, [pc, #280]	@ (8002874 <HAL_GPIO_Init+0x2fc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x1f6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a45      	ldr	r2, [pc, #276]	@ (8002878 <HAL_GPIO_Init+0x300>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x1f2>
 8002766:	2304      	movs	r3, #4
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x204>
 800276a:	2307      	movs	r3, #7
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x204>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x204>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x204>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x204>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	@ (8002864 <HAL_GPIO_Init+0x2ec>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b38      	ldr	r3, [pc, #224]	@ (800287c <HAL_GPIO_Init+0x304>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <HAL_GPIO_Init+0x304>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_GPIO_Init+0x304>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a24      	ldr	r2, [pc, #144]	@ (800287c <HAL_GPIO_Init+0x304>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_GPIO_Init+0x304>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002812:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_GPIO_Init+0x304>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002818:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_GPIO_Init+0x304>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283c:	4a0f      	ldr	r2, [pc, #60]	@ (800287c <HAL_GPIO_Init+0x304>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f aea2 	bls.w	8002594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40013c00 	.word	0x40013c00

08002880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e001      	b.n	80028a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e267      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d075      	beq.n	80029ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d00c      	beq.n	8002928 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002916:	2b08      	cmp	r3, #8
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4b7e      	ldr	r3, [pc, #504]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05b      	beq.n	80029ec <HAL_RCC_OscConfig+0x108>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d157      	bne.n	80029ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e242      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x74>
 800294a:	4b76      	ldr	r3, [pc, #472]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x98>
 8002962:	4b70      	ldr	r3, [pc, #448]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6f      	ldr	r2, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6c      	ldr	r2, [pc, #432]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0xb0>
 800297c:	4b69      	ldr	r3, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a68      	ldr	r2, [pc, #416]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b66      	ldr	r3, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a65      	ldr	r2, [pc, #404]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fc18 	bl	80021d0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff fc14 	bl	80021d0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e207      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0xc0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff fc04 	bl	80021d0 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7ff fc00 	bl	80021d0 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e1f3      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0xe8>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e1c7      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4937      	ldr	r1, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	e03a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fbb9 	bl	80021d0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7ff fbb5 	bl	80021d0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1a8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4925      	ldr	r1, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_RCC_OscConfig+0x244>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fb98 	bl	80021d0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fb94 	bl	80021d0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e187      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d036      	beq.n	8002b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7ff fb78 	bl	80021d0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fb74 	bl	80021d0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e167      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_OscConfig+0x240>)
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x200>
 8002b02:	e01b      	b.n	8002b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x248>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fb61 	bl	80021d0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e00e      	b.n	8002b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7ff fb5d 	bl	80021d0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d907      	bls.n	8002b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e150      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	42470000 	.word	0x42470000
 8002b2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ea      	bne.n	8002b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8097 	beq.w	8002c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4e:	4b81      	ldr	r3, [pc, #516]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	4a7c      	ldr	r2, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b77      	ldr	r3, [pc, #476]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b74      	ldr	r3, [pc, #464]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a73      	ldr	r2, [pc, #460]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7ff fb1d 	bl	80021d0 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7ff fb19 	bl	80021d0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e10c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCC_OscConfig+0x474>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x2ea>
 8002bc0:	4b64      	ldr	r3, [pc, #400]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a63      	ldr	r2, [pc, #396]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bcc:	e01c      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x30c>
 8002bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a5e      	ldr	r2, [pc, #376]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x324>
 8002bf0:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	4a57      	ldr	r2, [pc, #348]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a54      	ldr	r2, [pc, #336]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7ff fade 	bl	80021d0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff fada 	bl	80021d0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0cb      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	4b49      	ldr	r3, [pc, #292]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ee      	beq.n	8002c18 <HAL_RCC_OscConfig+0x334>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fac8 	bl	80021d0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7ff fac4 	bl	80021d0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0b5      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ee      	bne.n	8002c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a1 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c82:	4b34      	ldr	r3, [pc, #208]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d05c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d141      	bne.n	8002d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fa98 	bl	80021d0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff fa94 	bl	80021d0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e087      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	491b      	ldr	r1, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fa6d 	bl	80021d0 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff fa69 	bl	80021d0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e05c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x416>
 8002d18:	e054      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_RCC_OscConfig+0x478>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa56 	bl	80021d0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff fa52 	bl	80021d0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e045      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x444>
 8002d46:	e03d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e038      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_RCC_OscConfig+0x4ec>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cc      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b68      	ldr	r3, [pc, #416]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90c      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b65      	ldr	r3, [pc, #404]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a52      	ldr	r2, [pc, #328]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b3f      	ldr	r3, [pc, #252]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e067      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b37      	ldr	r3, [pc, #220]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4934      	ldr	r1, [pc, #208]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7ff f984 	bl	80021d0 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7ff f980 	bl	80021d0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20c      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	@ (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f821 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	@ (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f8e4 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	080064d0 	.word	0x080064d0
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	b094      	sub	sp, #80	@ 0x50
 8002fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb8:	4b79      	ldr	r3, [pc, #484]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	f200 80e1 	bhi.w	800318c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd2:	e0db      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b73      	ldr	r3, [pc, #460]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd8:	e0db      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fda:	4b73      	ldr	r3, [pc, #460]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fde:	e0d8      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fea:	4b6d      	ldr	r3, [pc, #436]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003000:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
 800300e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003012:	4622      	mov	r2, r4
 8003014:	462b      	mov	r3, r5
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	0159      	lsls	r1, r3, #5
 8003020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003024:	0150      	lsls	r0, r2, #5
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4621      	mov	r1, r4
 800302c:	1a51      	subs	r1, r2, r1
 800302e:	6139      	str	r1, [r7, #16]
 8003030:	4629      	mov	r1, r5
 8003032:	eb63 0301 	sbc.w	r3, r3, r1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003044:	4659      	mov	r1, fp
 8003046:	018b      	lsls	r3, r1, #6
 8003048:	4651      	mov	r1, sl
 800304a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800304e:	4651      	mov	r1, sl
 8003050:	018a      	lsls	r2, r1, #6
 8003052:	4651      	mov	r1, sl
 8003054:	ebb2 0801 	subs.w	r8, r2, r1
 8003058:	4659      	mov	r1, fp
 800305a:	eb63 0901 	sbc.w	r9, r3, r1
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800306e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003072:	4690      	mov	r8, r2
 8003074:	4699      	mov	r9, r3
 8003076:	4623      	mov	r3, r4
 8003078:	eb18 0303 	adds.w	r3, r8, r3
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	462b      	mov	r3, r5
 8003080:	eb49 0303 	adc.w	r3, r9, r3
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003092:	4629      	mov	r1, r5
 8003094:	024b      	lsls	r3, r1, #9
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800309c:	4621      	mov	r1, r4
 800309e:	024a      	lsls	r2, r1, #9
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030b0:	f7fd f8ee 	bl	8000290 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4613      	mov	r3, r2
 80030ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030bc:	e058      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030be:	4b38      	ldr	r3, [pc, #224]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	2200      	movs	r2, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	4611      	mov	r1, r2
 80030ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d8:	4642      	mov	r2, r8
 80030da:	464b      	mov	r3, r9
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	0159      	lsls	r1, r3, #5
 80030e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ea:	0150      	lsls	r0, r2, #5
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4641      	mov	r1, r8
 80030f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003108:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800310c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003110:	ebb2 040a 	subs.w	r4, r2, sl
 8003114:	eb63 050b 	sbc.w	r5, r3, fp
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	00eb      	lsls	r3, r5, #3
 8003122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003126:	00e2      	lsls	r2, r4, #3
 8003128:	4614      	mov	r4, r2
 800312a:	461d      	mov	r5, r3
 800312c:	4643      	mov	r3, r8
 800312e:	18e3      	adds	r3, r4, r3
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	464b      	mov	r3, r9
 8003134:	eb45 0303 	adc.w	r3, r5, r3
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003146:	4629      	mov	r1, r5
 8003148:	028b      	lsls	r3, r1, #10
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003150:	4621      	mov	r1, r4
 8003152:	028a      	lsls	r2, r1, #10
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	61fa      	str	r2, [r7, #28]
 8003160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003164:	f7fd f894 	bl	8000290 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003180:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800318e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003194:	4618      	mov	r0, r3
 8003196:	3750      	adds	r7, #80	@ 0x50
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b0:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000000 	.word	0x20000000

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c8:	f7ff fff0 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0a9b      	lsrs	r3, r3, #10
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	080064e0 	.word	0x080064e0

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f0:	f7ff ffdc 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0b5b      	lsrs	r3, r3, #13
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	@ (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	080064e0 	.word	0x080064e0

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003238:	2b00      	cmp	r3, #0
 800323a:	d038      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800323c:	4b68      	ldr	r3, [pc, #416]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003242:	f7fe ffc5 	bl	80021d0 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800324a:	f7fe ffc1 	bl	80021d0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0bd      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800325c:	4b61      	ldr	r3, [pc, #388]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	071b      	lsls	r3, r3, #28
 800327a:	495a      	ldr	r1, [pc, #360]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003282:	4b57      	ldr	r3, [pc, #348]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003288:	f7fe ffa2 	bl	80021d0 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003290:	f7fe ff9e 	bl	80021d0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e09a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a2:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8083 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	4b48      	ldr	r3, [pc, #288]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	4a47      	ldr	r2, [pc, #284]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80032cc:	4b45      	ldr	r3, [pc, #276]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032d8:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a42      	ldr	r2, [pc, #264]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe ff74 	bl	80021d0 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe ff70 	bl	80021d0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e06c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80032fe:	4b3a      	ldr	r3, [pc, #232]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800330a:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003312:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02f      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d028      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003328:	4b2e      	ldr	r3, [pc, #184]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003330:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b2e      	ldr	r3, [pc, #184]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003338:	4b2c      	ldr	r3, [pc, #176]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800333e:	4a29      	ldr	r2, [pc, #164]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003344:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d114      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe ff3e 	bl	80021d0 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe ff3a 	bl	80021d0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e034      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0ee      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339c:	4911      	ldr	r1, [pc, #68]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
 80033a2:	e005      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80033a4:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a0e      	ldr	r2, [pc, #56]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	4909      	ldr	r1, [pc, #36]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7d1a      	ldrb	r2, [r3, #20]
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80033d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	42470068 	.word	0x42470068
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42470e40 	.word	0x42470e40
 80033f0:	424711e0 	.word	0x424711e0

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e041      	b.n	800348a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd ffaa 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 fe88 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e03c      	b.n	8003526 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_TIM_Base_Start+0xa0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_TIM_Base_Start+0x5c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c6:	d013      	beq.n	80034f0 <HAL_TIM_Base_Start+0x5c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_TIM_Base_Start+0xa4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_TIM_Base_Start+0x5c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	@ (800353c <HAL_TIM_Base_Start+0xa8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIM_Base_Start+0x5c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_TIM_Base_Start+0xac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_Base_Start+0x5c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_TIM_Base_Start+0xb0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d111      	bne.n	8003514 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d010      	beq.n	8003524 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	e007      	b.n	8003524 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40014000 	.word	0x40014000

08003548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e041      	b.n	80035de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f839 	bl	80035e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fdde 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_TIM_PWM_Start+0x24>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e022      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b04      	cmp	r3, #4
 8003624:	d109      	bne.n	800363a <HAL_TIM_PWM_Start+0x3e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e015      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d109      	bne.n	8003654 <HAL_TIM_PWM_Start+0x58>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e008      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e068      	b.n	8003740 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0x82>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	e013      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0x92>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800368c:	e00b      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800369c:	e003      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f91a 	bl	80048e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <HAL_TIM_PWM_Start+0x14c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_TIM_PWM_Start+0x14c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_TIM_PWM_Start+0x10e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d013      	beq.n	800370a <HAL_TIM_PWM_Start+0x10e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_TIM_PWM_Start+0x150>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_TIM_PWM_Start+0x10e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_TIM_PWM_Start+0x154>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_TIM_PWM_Start+0x10e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a16      	ldr	r2, [pc, #88]	@ (8003754 <HAL_TIM_PWM_Start+0x158>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_PWM_Start+0x10e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <HAL_TIM_PWM_Start+0x15c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d111      	bne.n	800372e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d010      	beq.n	800373e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	e007      	b.n	800373e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40014000 	.word	0x40014000

0800375c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e041      	b.n	80037f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f839 	bl	80037fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 fcd4 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0x1e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e013      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x46>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d104      	bne.n	800383e <HAL_TIM_IC_Start_IT+0x2e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e00b      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x46>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d104      	bne.n	800384e <HAL_TIM_IC_Start_IT+0x3e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e003      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x46>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_TIM_IC_Start_IT+0x58>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e013      	b.n	8003890 <HAL_TIM_IC_Start_IT+0x80>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d104      	bne.n	8003878 <HAL_TIM_IC_Start_IT+0x68>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e00b      	b.n	8003890 <HAL_TIM_IC_Start_IT+0x80>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d104      	bne.n	8003888 <HAL_TIM_IC_Start_IT+0x78>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e003      	b.n	8003890 <HAL_TIM_IC_Start_IT+0x80>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800388e:	b2db      	uxtb	r3, r3
 8003890:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003898:	7b7b      	ldrb	r3, [r7, #13]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0c2      	b.n	8003a28 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_IC_Start_IT+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b0:	e013      	b.n	80038da <HAL_TIM_IC_Start_IT+0xca>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_IC_Start_IT+0xb2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c0:	e00b      	b.n	80038da <HAL_TIM_IC_Start_IT+0xca>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0xc2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d0:	e003      	b.n	80038da <HAL_TIM_IC_Start_IT+0xca>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0xda>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038e8:	e013      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x102>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0xea>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x102>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_TIM_IC_Start_IT+0xfa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003908:	e003      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x102>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d841      	bhi.n	800399c <HAL_TIM_IC_Start_IT+0x18c>
 8003918:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <HAL_TIM_IC_Start_IT+0x110>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003955 	.word	0x08003955
 8003924:	0800399d 	.word	0x0800399d
 8003928:	0800399d 	.word	0x0800399d
 800392c:	0800399d 	.word	0x0800399d
 8003930:	08003967 	.word	0x08003967
 8003934:	0800399d 	.word	0x0800399d
 8003938:	0800399d 	.word	0x0800399d
 800393c:	0800399d 	.word	0x0800399d
 8003940:	08003979 	.word	0x08003979
 8003944:	0800399d 	.word	0x0800399d
 8003948:	0800399d 	.word	0x0800399d
 800394c:	0800399d 	.word	0x0800399d
 8003950:	0800398b 	.word	0x0800398b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0202 	orr.w	r2, r2, #2
 8003962:	60da      	str	r2, [r3, #12]
      break;
 8003964:	e01d      	b.n	80039a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0204 	orr.w	r2, r2, #4
 8003974:	60da      	str	r2, [r3, #12]
      break;
 8003976:	e014      	b.n	80039a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	60da      	str	r2, [r3, #12]
      break;
 8003988:	e00b      	b.n	80039a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0210 	orr.w	r2, r2, #16
 8003998:	60da      	str	r2, [r3, #12]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
      break;
 80039a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13e      	bne.n	8003a26 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2201      	movs	r2, #1
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 ff99 	bl	80048e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003a30 <HAL_TIM_IC_Start_IT+0x220>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_TIM_IC_Start_IT+0x1e2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d013      	beq.n	80039f2 <HAL_TIM_IC_Start_IT+0x1e2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a19      	ldr	r2, [pc, #100]	@ (8003a34 <HAL_TIM_IC_Start_IT+0x224>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIM_IC_Start_IT+0x1e2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <HAL_TIM_IC_Start_IT+0x228>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_TIM_IC_Start_IT+0x1e2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <HAL_TIM_IC_Start_IT+0x22c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIM_IC_Start_IT+0x1e2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <HAL_TIM_IC_Start_IT+0x230>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d111      	bne.n	8003a16 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d010      	beq.n	8003a26 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	e007      	b.n	8003a26 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd ff34 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fb38 	bl	800410c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fb3f 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd ff0e 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb12 	bl	800410c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb19 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fee8 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 faec 	bl	800410c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 faf3 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d020      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2208      	movs	r2, #8
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fec2 	bl	80018fc <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fac6 	bl	800410c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 facd 	bl	8004120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 faa4 	bl	80040f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 ff28 	bl	8004a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa9e 	bl	8004134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fefa 	bl	8004a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e088      	b.n	8003d54 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c60:	f000 fc8a 	bl	8004578 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 020c 	bic.w	r2, r2, #12
 8003c72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
 8003c86:	e060      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c9e:	f000 fd02 	bl	80046a6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cb0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6999      	ldr	r1, [r3, #24]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	021a      	lsls	r2, r3, #8
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	619a      	str	r2, [r3, #24]
 8003cc6:	e040      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11b      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003cde:	f000 fd4f 	bl	8004780 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020c 	bic.w	r2, r2, #12
 8003cf0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
 8003d04:	e021      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d11c      	bne.n	8003d46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003d1c:	f000 fd6c 	bl	80047f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69d9      	ldr	r1, [r3, #28]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
 8003d44:	e001      	b.n	8003d4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e0ae      	b.n	8003ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	f200 809f 	bhi.w	8003ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003ec9 	.word	0x08003ec9
 8003d98:	08003ec9 	.word	0x08003ec9
 8003d9c:	08003ec9 	.word	0x08003ec9
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003ec9 	.word	0x08003ec9
 8003da8:	08003ec9 	.word	0x08003ec9
 8003dac:	08003ec9 	.word	0x08003ec9
 8003db0:	08003e47 	.word	0x08003e47
 8003db4:	08003ec9 	.word	0x08003ec9
 8003db8:	08003ec9 	.word	0x08003ec9
 8003dbc:	08003ec9 	.word	0x08003ec9
 8003dc0:	08003e87 	.word	0x08003e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fa48 	bl	8004260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0208 	orr.w	r2, r2, #8
 8003dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
      break;
 8003e02:	e064      	b.n	8003ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa8e 	bl	800432c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      break;
 8003e44:	e043      	b.n	8003ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fad9 	bl	8004404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0208 	orr.w	r2, r2, #8
 8003e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0204 	bic.w	r2, r2, #4
 8003e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69d9      	ldr	r1, [r3, #28]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	61da      	str	r2, [r3, #28]
      break;
 8003e84:	e023      	b.n	8003ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fb23 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	61da      	str	r2, [r3, #28]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_ConfigClockSource+0x1c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0b4      	b.n	8004066 <HAL_TIM_ConfigClockSource+0x186>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f34:	d03e      	beq.n	8003fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	f200 8087 	bhi.w	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f42:	f000 8086 	beq.w	8004052 <HAL_TIM_ConfigClockSource+0x172>
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4a:	d87f      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b70      	cmp	r3, #112	@ 0x70
 8003f4e:	d01a      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0xa6>
 8003f50:	2b70      	cmp	r3, #112	@ 0x70
 8003f52:	d87b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b60      	cmp	r3, #96	@ 0x60
 8003f56:	d050      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x11a>
 8003f58:	2b60      	cmp	r3, #96	@ 0x60
 8003f5a:	d877      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b50      	cmp	r3, #80	@ 0x50
 8003f5e:	d03c      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xfa>
 8003f60:	2b50      	cmp	r3, #80	@ 0x50
 8003f62:	d873      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d058      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x13a>
 8003f68:	2b40      	cmp	r3, #64	@ 0x40
 8003f6a:	d86f      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b30      	cmp	r3, #48	@ 0x30
 8003f6e:	d064      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f70:	2b30      	cmp	r3, #48	@ 0x30
 8003f72:	d86b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d060      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d867      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d05a      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x15a>
 8003f84:	e062      	b.n	800404c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f96:	f000 fc87 	bl	80048a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	609a      	str	r2, [r3, #8]
      break;
 8003fb2:	e04f      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	f000 fc70 	bl	80048a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fd6:	609a      	str	r2, [r3, #8]
      break;
 8003fd8:	e03c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 fb2e 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2150      	movs	r1, #80	@ 0x50
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fc3d 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e02c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004006:	461a      	mov	r2, r3
 8004008:	f000 fb8a 	bl	8004720 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2160      	movs	r1, #96	@ 0x60
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fc2d 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004018:	e01c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fb0e 	bl	8004648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2140      	movs	r1, #64	@ 0x40
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc1d 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004038:	e00c      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 fc14 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 800404a:	e003      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e000      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d831      	bhi.n	80040e8 <HAL_TIM_ReadCapturedValue+0x78>
 8004084:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040e9 	.word	0x080040e9
 8004094:	080040e9 	.word	0x080040e9
 8004098:	080040e9 	.word	0x080040e9
 800409c:	080040cb 	.word	0x080040cb
 80040a0:	080040e9 	.word	0x080040e9
 80040a4:	080040e9 	.word	0x080040e9
 80040a8:	080040e9 	.word	0x080040e9
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040e9 	.word	0x080040e9
 80040b4:	080040e9 	.word	0x080040e9
 80040b8:	080040e9 	.word	0x080040e9
 80040bc:	080040df 	.word	0x080040df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c6:	60fb      	str	r3, [r7, #12]

      break;
 80040c8:	e00f      	b.n	80040ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	60fb      	str	r3, [r7, #12]

      break;
 80040d2:	e00a      	b.n	80040ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	60fb      	str	r3, [r7, #12]

      break;
 80040dc:	e005      	b.n	80040ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	60fb      	str	r3, [r7, #12]

      break;
 80040e6:	e000      	b.n	80040ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040e8:	bf00      	nop
  }

  return tmpreg;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3a      	ldr	r2, [pc, #232]	@ (8004244 <TIM_Base_SetConfig+0xfc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <TIM_Base_SetConfig+0x100>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a36      	ldr	r2, [pc, #216]	@ (800424c <TIM_Base_SetConfig+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a35      	ldr	r2, [pc, #212]	@ (8004250 <TIM_Base_SetConfig+0x108>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <TIM_Base_SetConfig+0xfc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a0:	d017      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a28      	ldr	r2, [pc, #160]	@ (8004248 <TIM_Base_SetConfig+0x100>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a27      	ldr	r2, [pc, #156]	@ (800424c <TIM_Base_SetConfig+0x104>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00f      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <TIM_Base_SetConfig+0x108>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a25      	ldr	r2, [pc, #148]	@ (8004254 <TIM_Base_SetConfig+0x10c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <TIM_Base_SetConfig+0x110>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a23      	ldr	r2, [pc, #140]	@ (800425c <TIM_Base_SetConfig+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <TIM_Base_SetConfig+0xfc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  }
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800

08004260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 0201 	bic.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0302 	bic.w	r3, r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <TIM_OC1_SetConfig+0xc8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10c      	bne.n	80042d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0308 	bic.w	r3, r3, #8
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <TIM_OC1_SetConfig+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d111      	bne.n	8004302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40010000 	.word	0x40010000

0800432c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0210 	bic.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0320 	bic.w	r3, r3, #32
 8004376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <TIM_OC2_SetConfig+0xd4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10d      	bne.n	80043a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a15      	ldr	r2, [pc, #84]	@ (8004400 <TIM_OC2_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d113      	bne.n	80043d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <TIM_OC3_SetConfig+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800447c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <TIM_OC3_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d113      	bne.n	80044ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40010000 	.word	0x40010000

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a10      	ldr	r2, [pc, #64]	@ (8004574 <TIM_OC4_SetConfig+0x9c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d109      	bne.n	800454c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800453e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000

08004578 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 0201 	bic.w	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a24      	ldr	r2, [pc, #144]	@ (8004634 <TIM_TI1_SetConfig+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ac:	d00f      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a21      	ldr	r2, [pc, #132]	@ (8004638 <TIM_TI1_SetConfig+0xc0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a20      	ldr	r2, [pc, #128]	@ (800463c <TIM_TI1_SetConfig+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <TIM_TI1_SetConfig+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_TI1_SetConfig+0x56>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <TIM_TI1_SetConfig+0xcc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <TIM_TI1_SetConfig+0x5a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <TIM_TI1_SetConfig+0x5c>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e003      	b.n	80045f2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 030a 	and.w	r3, r3, #10
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40014000 	.word	0x40014000

08004648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 030a 	bic.w	r3, r3, #10
 8004684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b087      	sub	sp, #28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0210 	bic.w	r2, r3, #16
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0210 	bic.w	r2, r3, #16
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800474a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	031b      	lsls	r3, r3, #12
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800475c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f023 0303 	bic.w	r3, r3, #3
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004824:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	031b      	lsls	r3, r3, #12
 800483c:	b29b      	uxth	r3, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800484a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	031b      	lsls	r3, r3, #12
 8004850:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2201      	movs	r2, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e050      	b.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1c      	ldr	r2, [pc, #112]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d013      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10c      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40014000 	.word	0x40014000

08004a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e042      	b.n	8004ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd f934 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	@ 0x24
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fdf3 	bl	8005668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	@ 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d175      	bne.n	8004be4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UART_Transmit+0x2c>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e06e      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2221      	movs	r2, #33	@ 0x21
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b16:	f7fd fb5b 	bl	80021d0 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b30:	d108      	bne.n	8004b44 <HAL_UART_Transmit+0x6c>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e003      	b.n	8004b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b4c:	e02e      	b.n	8004bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fb55 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e03a      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	3302      	adds	r3, #2
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e007      	b.n	8004b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1cb      	bne.n	8004b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2140      	movs	r1, #64	@ 0x40
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fb21 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d121      	bne.n	8004c4c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Transmit_IT+0x26>
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e01a      	b.n	8004c4e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2221      	movs	r2, #33	@ 0x21
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	4613      	mov	r3, r2
 8004c66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d112      	bne.n	8004c9a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_UART_Receive_IT+0x26>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e00b      	b.n	8004c9c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb12 	bl	80052ba <UART_Start_Receive_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	e000      	b.n	8004c9c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_UART_IRQHandler+0x66>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fbf2 	bl	80054ec <UART_Receive_IT>
      return;
 8004d08:	e25b      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80de 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x22c>
 8004d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80d1 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xae>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xd2>
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xf6>
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_UART_IRQHandler+0x126>
 8004da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d105      	bne.n	8004dbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	f043 0208 	orr.w	r2, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 81f2 	beq.w	80051b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_UART_IRQHandler+0x14e>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fb7d 	bl	80054ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_UART_IRQHandler+0x17a>
 8004e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04f      	beq.n	8004ebe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa85 	bl	800532e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2e:	2b40      	cmp	r3, #64	@ 0x40
 8004e30:	d141      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3314      	adds	r3, #20
 8004e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1d9      	bne.n	8004e32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005084 <HAL_UART_IRQHandler+0x3e0>)
 8004e8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fb4d 	bl	8002532 <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00e      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f994 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f990 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f98c 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eca:	e175      	b.n	80051b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	bf00      	nop
    return;
 8004ece:	e173      	b.n	80051b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 814f 	bne.w	8005178 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8148 	beq.w	8005178 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8141 	beq.w	8005178 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	f040 80b6 	bne.w	8005088 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8145 	beq.w	80051bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	f080 813e 	bcs.w	80051bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f52:	f000 8088 	beq.w	8005066 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d9      	bne.n	8004f56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e1      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005004:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005008:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e3      	bne.n	8004fde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005036:	f023 0310 	bic.w	r3, r3, #16
 800503a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005048:	65ba      	str	r2, [r7, #88]	@ 0x58
 800504a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800504e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e3      	bne.n	8005024 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd f9f6 	bl	8002452 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8b7 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005082:	e09b      	b.n	80051bc <HAL_UART_IRQHandler+0x518>
 8005084:	080053f5 	.word	0x080053f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005090:	b29b      	uxth	r3, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 808e 	beq.w	80051c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8089 	beq.w	80051c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e3      	bne.n	80050ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	623b      	str	r3, [r7, #32]
   return(result);
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800510a:	633a      	str	r2, [r7, #48]	@ 0x30
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60fb      	str	r3, [r7, #12]
   return(result);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e3      	bne.n	800512c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800516a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f83d 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005176:	e023      	b.n	80051c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <HAL_UART_IRQHandler+0x4f4>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f943 	bl	800541c <UART_Transmit_IT>
    return;
 8005196:	e014      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_UART_IRQHandler+0x51e>
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f983 	bl	80054bc <UART_EndTransmit_IT>
    return;
 80051b6:	e004      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80051c0:	bf00      	nop
  }
}
 80051c2:	37e8      	adds	r7, #232	@ 0xe8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	e03b      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d037      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fc ffd5 	bl	80021d0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e03a      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d023      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b80      	cmp	r3, #128	@ 0x80
 800524e:	d020      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b40      	cmp	r3, #64	@ 0x40
 8005254:	d01d      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d116      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f857 	bl	800532e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2208      	movs	r2, #8
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e00f      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d0b4      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	4613      	mov	r3, r2
 80052c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2222      	movs	r2, #34	@ 0x22
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0220 	orr.w	r2, r2, #32
 800531e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800532e:	b480      	push	{r7}
 8005330:	b095      	sub	sp, #84	@ 0x54
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800534c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005356:	643a      	str	r2, [r7, #64]	@ 0x40
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800535c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	61fb      	str	r3, [r7, #28]
   return(result);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800538a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e5      	bne.n	800536a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d119      	bne.n	80053da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 0310 	bic.w	r3, r3, #16
 80053bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c6:	61ba      	str	r2, [r7, #24]
 80053c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	613b      	str	r3, [r7, #16]
   return(result);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053e8:	bf00      	nop
 80053ea:	3754      	adds	r7, #84	@ 0x54
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fee4 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b21      	cmp	r3, #33	@ 0x21
 800542e:	d13e      	bne.n	80054ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005438:	d114      	bne.n	8005464 <UART_Transmit_IT+0x48>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d110      	bne.n	8005464 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005456:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	1c9a      	adds	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]
 8005462:	e008      	b.n	8005476 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	1c59      	adds	r1, r3, #1
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6211      	str	r1, [r2, #32]
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4619      	mov	r1, r3
 8005484:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10f      	bne.n	80054aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005498:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fe73 	bl	80051c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	@ 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b22      	cmp	r3, #34	@ 0x22
 80054fe:	f040 80ae 	bne.w	800565e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550a:	d117      	bne.n	800553c <UART_Receive_IT+0x50>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	b29a      	uxth	r2, r3
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	629a      	str	r2, [r3, #40]	@ 0x28
 800553a:	e026      	b.n	800558a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554e:	d007      	beq.n	8005560 <UART_Receive_IT+0x74>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <UART_Receive_IT+0x82>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e008      	b.n	8005580 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800557a:	b2da      	uxtb	r2, r3
 800557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4619      	mov	r1, r3
 8005598:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800559a:	2b00      	cmp	r3, #0
 800559c:	d15d      	bne.n	800565a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0220 	bic.w	r2, r2, #32
 80055ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d135      	bne.n	8005650 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f023 0310 	bic.w	r3, r3, #16
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800560a:	623a      	str	r2, [r7, #32]
 800560c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69f9      	ldr	r1, [r7, #28]
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	61bb      	str	r3, [r7, #24]
   return(result);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d10a      	bne.n	8005642 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fdd1 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
 800564e:	e002      	b.n	8005656 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fc fc8d 	bl	8001f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e002      	b.n	8005660 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3730      	adds	r7, #48	@ 0x30
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800566c:	b0c0      	sub	sp, #256	@ 0x100
 800566e:	af00      	add	r7, sp, #0
 8005670:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	ea40 0301 	orr.w	r3, r0, r1
 8005690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056c0:	f021 010c 	bic.w	r1, r1, #12
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056ce:	430b      	orrs	r3, r1
 80056d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e2:	6999      	ldr	r1, [r3, #24]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	ea40 0301 	orr.w	r3, r0, r1
 80056ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005934 <UART_SetConfig+0x2cc>)
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d005      	beq.n	8005708 <UART_SetConfig+0xa0>
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b8d      	ldr	r3, [pc, #564]	@ (8005938 <UART_SetConfig+0x2d0>)
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005708:	f7fd fd70 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 800570c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005710:	e003      	b.n	800571a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005712:	f7fd fd57 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8005716:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005724:	f040 810c 	bne.w	8005940 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005732:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005736:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	1891      	adds	r1, r2, r2
 8005740:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005742:	415b      	adcs	r3, r3
 8005744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005746:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800574a:	4621      	mov	r1, r4
 800574c:	eb12 0801 	adds.w	r8, r2, r1
 8005750:	4629      	mov	r1, r5
 8005752:	eb43 0901 	adc.w	r9, r3, r1
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576a:	4690      	mov	r8, r2
 800576c:	4699      	mov	r9, r3
 800576e:	4623      	mov	r3, r4
 8005770:	eb18 0303 	adds.w	r3, r8, r3
 8005774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005778:	462b      	mov	r3, r5
 800577a:	eb49 0303 	adc.w	r3, r9, r3
 800577e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800578e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005792:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005796:	460b      	mov	r3, r1
 8005798:	18db      	adds	r3, r3, r3
 800579a:	653b      	str	r3, [r7, #80]	@ 0x50
 800579c:	4613      	mov	r3, r2
 800579e:	eb42 0303 	adc.w	r3, r2, r3
 80057a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057ac:	f7fa fd70 	bl	8000290 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b61      	ldr	r3, [pc, #388]	@ (800593c <UART_SetConfig+0x2d4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057d8:	415b      	adcs	r3, r3
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057e0:	4641      	mov	r1, r8
 80057e2:	eb12 0a01 	adds.w	sl, r2, r1
 80057e6:	4649      	mov	r1, r9
 80057e8:	eb43 0b01 	adc.w	fp, r3, r1
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005800:	4692      	mov	sl, r2
 8005802:	469b      	mov	fp, r3
 8005804:	4643      	mov	r3, r8
 8005806:	eb1a 0303 	adds.w	r3, sl, r3
 800580a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800580e:	464b      	mov	r3, r9
 8005810:	eb4b 0303 	adc.w	r3, fp, r3
 8005814:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005824:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005828:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800582c:	460b      	mov	r3, r1
 800582e:	18db      	adds	r3, r3, r3
 8005830:	643b      	str	r3, [r7, #64]	@ 0x40
 8005832:	4613      	mov	r3, r2
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	647b      	str	r3, [r7, #68]	@ 0x44
 800583a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800583e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005842:	f7fa fd25 	bl	8000290 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4611      	mov	r1, r2
 800584c:	4b3b      	ldr	r3, [pc, #236]	@ (800593c <UART_SetConfig+0x2d4>)
 800584e:	fba3 2301 	umull	r2, r3, r3, r1
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2264      	movs	r2, #100	@ 0x64
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	1acb      	subs	r3, r1, r3
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005862:	4b36      	ldr	r3, [pc, #216]	@ (800593c <UART_SetConfig+0x2d4>)
 8005864:	fba3 2302 	umull	r2, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005870:	441c      	add	r4, r3
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800587c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005880:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800588c:	415b      	adcs	r3, r3
 800588e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6339      	str	r1, [r7, #48]	@ 0x30
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c8:	464b      	mov	r3, r9
 80058ca:	460a      	mov	r2, r1
 80058cc:	eb42 0303 	adc.w	r3, r2, r3
 80058d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058e8:	460b      	mov	r3, r1
 80058ea:	18db      	adds	r3, r3, r3
 80058ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ee:	4613      	mov	r3, r2
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058fe:	f7fa fcc7 	bl	8000290 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <UART_SetConfig+0x2d4>)
 8005908:	fba3 1302 	umull	r1, r3, r3, r2
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	2164      	movs	r1, #100	@ 0x64
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3332      	adds	r3, #50	@ 0x32
 800591a:	4a08      	ldr	r2, [pc, #32]	@ (800593c <UART_SetConfig+0x2d4>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	f003 0207 	and.w	r2, r3, #7
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4422      	add	r2, r4
 800592e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005930:	e106      	b.n	8005b40 <UART_SetConfig+0x4d8>
 8005932:	bf00      	nop
 8005934:	40011000 	.word	0x40011000
 8005938:	40011400 	.word	0x40011400
 800593c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800594a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800594e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005952:	4642      	mov	r2, r8
 8005954:	464b      	mov	r3, r9
 8005956:	1891      	adds	r1, r2, r2
 8005958:	6239      	str	r1, [r7, #32]
 800595a:	415b      	adcs	r3, r3
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
 800595e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005962:	4641      	mov	r1, r8
 8005964:	1854      	adds	r4, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0501 	adc.w	r5, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	00eb      	lsls	r3, r5, #3
 8005976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597a:	00e2      	lsls	r2, r4, #3
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	4643      	mov	r3, r8
 8005982:	18e3      	adds	r3, r4, r3
 8005984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005988:	464b      	mov	r3, r9
 800598a:	eb45 0303 	adc.w	r3, r5, r3
 800598e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800599e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059ae:	4629      	mov	r1, r5
 80059b0:	008b      	lsls	r3, r1, #2
 80059b2:	4621      	mov	r1, r4
 80059b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b8:	4621      	mov	r1, r4
 80059ba:	008a      	lsls	r2, r1, #2
 80059bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059c0:	f7fa fc66 	bl	8000290 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4b60      	ldr	r3, [pc, #384]	@ (8005b4c <UART_SetConfig+0x4e4>)
 80059ca:	fba3 2302 	umull	r2, r3, r3, r2
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	011c      	lsls	r4, r3, #4
 80059d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	1891      	adds	r1, r2, r2
 80059ea:	61b9      	str	r1, [r7, #24]
 80059ec:	415b      	adcs	r3, r3
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f4:	4641      	mov	r1, r8
 80059f6:	1851      	adds	r1, r2, r1
 80059f8:	6139      	str	r1, [r7, #16]
 80059fa:	4649      	mov	r1, r9
 80059fc:	414b      	adcs	r3, r1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	00cb      	lsls	r3, r1, #3
 8005a10:	4651      	mov	r1, sl
 8005a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a16:	4651      	mov	r1, sl
 8005a18:	00ca      	lsls	r2, r1, #3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4642      	mov	r2, r8
 8005a22:	189b      	adds	r3, r3, r2
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a28:	464b      	mov	r3, r9
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	eb42 0303 	adc.w	r3, r2, r3
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	008b      	lsls	r3, r1, #2
 8005a50:	4641      	mov	r1, r8
 8005a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a56:	4641      	mov	r1, r8
 8005a58:	008a      	lsls	r2, r1, #2
 8005a5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a5e:	f7fa fc17 	bl	8000290 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	4b38      	ldr	r3, [pc, #224]	@ (8005b4c <UART_SetConfig+0x4e4>)
 8005a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2264      	movs	r2, #100	@ 0x64
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	1acb      	subs	r3, r1, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	@ 0x32
 8005a7c:	4a33      	ldr	r2, [pc, #204]	@ (8005b4c <UART_SetConfig+0x4e4>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a88:	441c      	add	r4, r3
 8005a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8e:	2200      	movs	r2, #0
 8005a90:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a92:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	1891      	adds	r1, r2, r2
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	1851      	adds	r1, r2, r1
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	4649      	mov	r1, r9
 8005ab0:	414b      	adcs	r3, r1
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	00cb      	lsls	r3, r1, #3
 8005ac4:	4651      	mov	r1, sl
 8005ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aca:	4651      	mov	r1, sl
 8005acc:	00ca      	lsls	r2, r1, #3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ada:	464b      	mov	r3, r9
 8005adc:	460a      	mov	r2, r1
 8005ade:	eb42 0303 	adc.w	r3, r2, r3
 8005ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aee:	667a      	str	r2, [r7, #100]	@ 0x64
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005afc:	4649      	mov	r1, r9
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	4641      	mov	r1, r8
 8005b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b06:	4641      	mov	r1, r8
 8005b08:	008a      	lsls	r2, r1, #2
 8005b0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b0e:	f7fa fbbf 	bl	8000290 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <UART_SetConfig+0x4e4>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	@ 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	3332      	adds	r3, #50	@ 0x32
 8005b2a:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <UART_SetConfig+0x4e4>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4422      	add	r2, r4
 8005b3e:	609a      	str	r2, [r3, #8]
}
 8005b40:	bf00      	nop
 8005b42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b46:	46bd      	mov	sp, r7
 8005b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4c:	51eb851f 	.word	0x51eb851f

08005b50 <siprintf>:
 8005b50:	b40e      	push	{r1, r2, r3}
 8005b52:	b500      	push	{lr}
 8005b54:	b09c      	sub	sp, #112	@ 0x70
 8005b56:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b58:	9002      	str	r0, [sp, #8]
 8005b5a:	9006      	str	r0, [sp, #24]
 8005b5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b60:	4809      	ldr	r0, [pc, #36]	@ (8005b88 <siprintf+0x38>)
 8005b62:	9107      	str	r1, [sp, #28]
 8005b64:	9104      	str	r1, [sp, #16]
 8005b66:	4909      	ldr	r1, [pc, #36]	@ (8005b8c <siprintf+0x3c>)
 8005b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6c:	9105      	str	r1, [sp, #20]
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	a902      	add	r1, sp, #8
 8005b74:	f000 f994 	bl	8005ea0 <_svfiprintf_r>
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	b01c      	add	sp, #112	@ 0x70
 8005b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b84:	b003      	add	sp, #12
 8005b86:	4770      	bx	lr
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	ffff0208 	.word	0xffff0208

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <__errno>:
 8005ba0:	4b01      	ldr	r3, [pc, #4]	@ (8005ba8 <__errno+0x8>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4d0d      	ldr	r5, [pc, #52]	@ (8005be4 <__libc_init_array+0x38>)
 8005bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005be8 <__libc_init_array+0x3c>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005bec <__libc_init_array+0x40>)
 8005bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005bf0 <__libc_init_array+0x44>)
 8005bc0:	f000 fc66 	bl	8006490 <_init>
 8005bc4:	1b64      	subs	r4, r4, r5
 8005bc6:	10a4      	asrs	r4, r4, #2
 8005bc8:	2600      	movs	r6, #0
 8005bca:	42a6      	cmp	r6, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd4:	4798      	blx	r3
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bde:	4798      	blx	r3
 8005be0:	3601      	adds	r6, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	08006524 	.word	0x08006524
 8005be8:	08006524 	.word	0x08006524
 8005bec:	08006524 	.word	0x08006524
 8005bf0:	08006528 	.word	0x08006528

08005bf4 <__retarget_lock_acquire_recursive>:
 8005bf4:	4770      	bx	lr

08005bf6 <__retarget_lock_release_recursive>:
 8005bf6:	4770      	bx	lr

08005bf8 <_free_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d041      	beq.n	8005c84 <_free_r+0x8c>
 8005c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c04:	1f0c      	subs	r4, r1, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfb8      	it	lt
 8005c0a:	18e4      	addlt	r4, r4, r3
 8005c0c:	f000 f8e0 	bl	8005dd0 <__malloc_lock>
 8005c10:	4a1d      	ldr	r2, [pc, #116]	@ (8005c88 <_free_r+0x90>)
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	b933      	cbnz	r3, 8005c24 <_free_r+0x2c>
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c20:	f000 b8dc 	b.w	8005ddc <__malloc_unlock>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d908      	bls.n	8005c3a <_free_r+0x42>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	1821      	adds	r1, r4, r0
 8005c2c:	428b      	cmp	r3, r1
 8005c2e:	bf01      	itttt	eq
 8005c30:	6819      	ldreq	r1, [r3, #0]
 8005c32:	685b      	ldreq	r3, [r3, #4]
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	e7ed      	b.n	8005c16 <_free_r+0x1e>
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_free_r+0x4c>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d9fa      	bls.n	8005c3a <_free_r+0x42>
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	1850      	adds	r0, r2, r1
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d10b      	bne.n	8005c64 <_free_r+0x6c>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	1850      	adds	r0, r2, r1
 8005c52:	4283      	cmp	r3, r0
 8005c54:	6011      	str	r1, [r2, #0]
 8005c56:	d1e0      	bne.n	8005c1a <_free_r+0x22>
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	6053      	str	r3, [r2, #4]
 8005c5e:	4408      	add	r0, r1
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	e7da      	b.n	8005c1a <_free_r+0x22>
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x74>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d6      	b.n	8005c1a <_free_r+0x22>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	1821      	adds	r1, r4, r0
 8005c70:	428b      	cmp	r3, r1
 8005c72:	bf04      	itt	eq
 8005c74:	6819      	ldreq	r1, [r3, #0]
 8005c76:	685b      	ldreq	r3, [r3, #4]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	bf04      	itt	eq
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	6054      	str	r4, [r2, #4]
 8005c82:	e7ca      	b.n	8005c1a <_free_r+0x22>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	200004a0 	.word	0x200004a0

08005c8c <sbrk_aligned>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ccc <sbrk_aligned+0x40>)
 8005c90:	460c      	mov	r4, r1
 8005c92:	6831      	ldr	r1, [r6, #0]
 8005c94:	4605      	mov	r5, r0
 8005c96:	b911      	cbnz	r1, 8005c9e <sbrk_aligned+0x12>
 8005c98:	f000 fba6 	bl	80063e8 <_sbrk_r>
 8005c9c:	6030      	str	r0, [r6, #0]
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fba1 	bl	80063e8 <_sbrk_r>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d103      	bne.n	8005cb2 <sbrk_aligned+0x26>
 8005caa:	f04f 34ff 	mov.w	r4, #4294967295
 8005cae:	4620      	mov	r0, r4
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	1cc4      	adds	r4, r0, #3
 8005cb4:	f024 0403 	bic.w	r4, r4, #3
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	d0f8      	beq.n	8005cae <sbrk_aligned+0x22>
 8005cbc:	1a21      	subs	r1, r4, r0
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fb92 	bl	80063e8 <_sbrk_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1f2      	bne.n	8005cae <sbrk_aligned+0x22>
 8005cc8:	e7ef      	b.n	8005caa <sbrk_aligned+0x1e>
 8005cca:	bf00      	nop
 8005ccc:	2000049c 	.word	0x2000049c

08005cd0 <_malloc_r>:
 8005cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	1ccd      	adds	r5, r1, #3
 8005cd6:	f025 0503 	bic.w	r5, r5, #3
 8005cda:	3508      	adds	r5, #8
 8005cdc:	2d0c      	cmp	r5, #12
 8005cde:	bf38      	it	cc
 8005ce0:	250c      	movcc	r5, #12
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	db01      	blt.n	8005cec <_malloc_r+0x1c>
 8005ce8:	42a9      	cmp	r1, r5
 8005cea:	d904      	bls.n	8005cf6 <_malloc_r+0x26>
 8005cec:	230c      	movs	r3, #12
 8005cee:	6033      	str	r3, [r6, #0]
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dcc <_malloc_r+0xfc>
 8005cfa:	f000 f869 	bl	8005dd0 <__malloc_lock>
 8005cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005d02:	461c      	mov	r4, r3
 8005d04:	bb44      	cbnz	r4, 8005d58 <_malloc_r+0x88>
 8005d06:	4629      	mov	r1, r5
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7ff ffbf 	bl	8005c8c <sbrk_aligned>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	4604      	mov	r4, r0
 8005d12:	d158      	bne.n	8005dc6 <_malloc_r+0xf6>
 8005d14:	f8d8 4000 	ldr.w	r4, [r8]
 8005d18:	4627      	mov	r7, r4
 8005d1a:	2f00      	cmp	r7, #0
 8005d1c:	d143      	bne.n	8005da6 <_malloc_r+0xd6>
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d04b      	beq.n	8005dba <_malloc_r+0xea>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4639      	mov	r1, r7
 8005d26:	4630      	mov	r0, r6
 8005d28:	eb04 0903 	add.w	r9, r4, r3
 8005d2c:	f000 fb5c 	bl	80063e8 <_sbrk_r>
 8005d30:	4581      	cmp	r9, r0
 8005d32:	d142      	bne.n	8005dba <_malloc_r+0xea>
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	1a6d      	subs	r5, r5, r1
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff ffa6 	bl	8005c8c <sbrk_aligned>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d03a      	beq.n	8005dba <_malloc_r+0xea>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	442b      	add	r3, r5
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	bb62      	cbnz	r2, 8005dac <_malloc_r+0xdc>
 8005d52:	f8c8 7000 	str.w	r7, [r8]
 8005d56:	e00f      	b.n	8005d78 <_malloc_r+0xa8>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	1b52      	subs	r2, r2, r5
 8005d5c:	d420      	bmi.n	8005da0 <_malloc_r+0xd0>
 8005d5e:	2a0b      	cmp	r2, #11
 8005d60:	d917      	bls.n	8005d92 <_malloc_r+0xc2>
 8005d62:	1961      	adds	r1, r4, r5
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	6025      	str	r5, [r4, #0]
 8005d68:	bf18      	it	ne
 8005d6a:	6059      	strne	r1, [r3, #4]
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	bf08      	it	eq
 8005d70:	f8c8 1000 	streq.w	r1, [r8]
 8005d74:	5162      	str	r2, [r4, r5]
 8005d76:	604b      	str	r3, [r1, #4]
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f82f 	bl	8005ddc <__malloc_unlock>
 8005d7e:	f104 000b 	add.w	r0, r4, #11
 8005d82:	1d23      	adds	r3, r4, #4
 8005d84:	f020 0007 	bic.w	r0, r0, #7
 8005d88:	1ac2      	subs	r2, r0, r3
 8005d8a:	bf1c      	itt	ne
 8005d8c:	1a1b      	subne	r3, r3, r0
 8005d8e:	50a3      	strne	r3, [r4, r2]
 8005d90:	e7af      	b.n	8005cf2 <_malloc_r+0x22>
 8005d92:	6862      	ldr	r2, [r4, #4]
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	bf0c      	ite	eq
 8005d98:	f8c8 2000 	streq.w	r2, [r8]
 8005d9c:	605a      	strne	r2, [r3, #4]
 8005d9e:	e7eb      	b.n	8005d78 <_malloc_r+0xa8>
 8005da0:	4623      	mov	r3, r4
 8005da2:	6864      	ldr	r4, [r4, #4]
 8005da4:	e7ae      	b.n	8005d04 <_malloc_r+0x34>
 8005da6:	463c      	mov	r4, r7
 8005da8:	687f      	ldr	r7, [r7, #4]
 8005daa:	e7b6      	b.n	8005d1a <_malloc_r+0x4a>
 8005dac:	461a      	mov	r2, r3
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d1fb      	bne.n	8005dac <_malloc_r+0xdc>
 8005db4:	2300      	movs	r3, #0
 8005db6:	6053      	str	r3, [r2, #4]
 8005db8:	e7de      	b.n	8005d78 <_malloc_r+0xa8>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f80c 	bl	8005ddc <__malloc_unlock>
 8005dc4:	e794      	b.n	8005cf0 <_malloc_r+0x20>
 8005dc6:	6005      	str	r5, [r0, #0]
 8005dc8:	e7d6      	b.n	8005d78 <_malloc_r+0xa8>
 8005dca:	bf00      	nop
 8005dcc:	200004a0 	.word	0x200004a0

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	@ (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f7ff bf0f 	b.w	8005bf4 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000498 	.word	0x20000498

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	@ (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f7ff bf0a 	b.w	8005bf6 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20000498 	.word	0x20000498

08005de8 <__ssputs_r>:
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	688e      	ldr	r6, [r1, #8]
 8005dee:	461f      	mov	r7, r3
 8005df0:	42be      	cmp	r6, r7
 8005df2:	680b      	ldr	r3, [r1, #0]
 8005df4:	4682      	mov	sl, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	4690      	mov	r8, r2
 8005dfa:	d82d      	bhi.n	8005e58 <__ssputs_r+0x70>
 8005dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e04:	d026      	beq.n	8005e54 <__ssputs_r+0x6c>
 8005e06:	6965      	ldr	r5, [r4, #20]
 8005e08:	6909      	ldr	r1, [r1, #16]
 8005e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e0e:	eba3 0901 	sub.w	r9, r3, r1
 8005e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e16:	1c7b      	adds	r3, r7, #1
 8005e18:	444b      	add	r3, r9
 8005e1a:	106d      	asrs	r5, r5, #1
 8005e1c:	429d      	cmp	r5, r3
 8005e1e:	bf38      	it	cc
 8005e20:	461d      	movcc	r5, r3
 8005e22:	0553      	lsls	r3, r2, #21
 8005e24:	d527      	bpl.n	8005e76 <__ssputs_r+0x8e>
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7ff ff52 	bl	8005cd0 <_malloc_r>
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	b360      	cbz	r0, 8005e8a <__ssputs_r+0xa2>
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	464a      	mov	r2, r9
 8005e34:	f000 fae8 	bl	8006408 <memcpy>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	6126      	str	r6, [r4, #16]
 8005e46:	6165      	str	r5, [r4, #20]
 8005e48:	444e      	add	r6, r9
 8005e4a:	eba5 0509 	sub.w	r5, r5, r9
 8005e4e:	6026      	str	r6, [r4, #0]
 8005e50:	60a5      	str	r5, [r4, #8]
 8005e52:	463e      	mov	r6, r7
 8005e54:	42be      	cmp	r6, r7
 8005e56:	d900      	bls.n	8005e5a <__ssputs_r+0x72>
 8005e58:	463e      	mov	r6, r7
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4641      	mov	r1, r8
 8005e60:	f000 faa8 	bl	80063b4 <memmove>
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	1b9b      	subs	r3, r3, r6
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	4433      	add	r3, r6
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	2000      	movs	r0, #0
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	462a      	mov	r2, r5
 8005e78:	f000 fad4 	bl	8006424 <_realloc_r>
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d1e0      	bne.n	8005e44 <__ssputs_r+0x5c>
 8005e82:	6921      	ldr	r1, [r4, #16]
 8005e84:	4650      	mov	r0, sl
 8005e86:	f7ff feb7 	bl	8005bf8 <_free_r>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	f8ca 3000 	str.w	r3, [sl]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	e7e9      	b.n	8005e72 <__ssputs_r+0x8a>
	...

08005ea0 <_svfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	898b      	ldrh	r3, [r1, #12]
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	b09d      	sub	sp, #116	@ 0x74
 8005eac:	4607      	mov	r7, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	d510      	bpl.n	8005ed6 <_svfiprintf_r+0x36>
 8005eb4:	690b      	ldr	r3, [r1, #16]
 8005eb6:	b973      	cbnz	r3, 8005ed6 <_svfiprintf_r+0x36>
 8005eb8:	2140      	movs	r1, #64	@ 0x40
 8005eba:	f7ff ff09 	bl	8005cd0 <_malloc_r>
 8005ebe:	6028      	str	r0, [r5, #0]
 8005ec0:	6128      	str	r0, [r5, #16]
 8005ec2:	b930      	cbnz	r0, 8005ed2 <_svfiprintf_r+0x32>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b01d      	add	sp, #116	@ 0x74
 8005ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed2:	2340      	movs	r3, #64	@ 0x40
 8005ed4:	616b      	str	r3, [r5, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eda:	2320      	movs	r3, #32
 8005edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee4:	2330      	movs	r3, #48	@ 0x30
 8005ee6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006084 <_svfiprintf_r+0x1e4>
 8005eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eee:	f04f 0901 	mov.w	r9, #1
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	469a      	mov	sl, r3
 8005ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efa:	b10a      	cbz	r2, 8005f00 <_svfiprintf_r+0x60>
 8005efc:	2a25      	cmp	r2, #37	@ 0x25
 8005efe:	d1f9      	bne.n	8005ef4 <_svfiprintf_r+0x54>
 8005f00:	ebba 0b04 	subs.w	fp, sl, r4
 8005f04:	d00b      	beq.n	8005f1e <_svfiprintf_r+0x7e>
 8005f06:	465b      	mov	r3, fp
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ff6b 	bl	8005de8 <__ssputs_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	f000 80a7 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f1a:	445a      	add	r2, fp
 8005f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 809f 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f32:	f10a 0a01 	add.w	sl, sl, #1
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f40:	4654      	mov	r4, sl
 8005f42:	2205      	movs	r2, #5
 8005f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f48:	484e      	ldr	r0, [pc, #312]	@ (8006084 <_svfiprintf_r+0x1e4>)
 8005f4a:	f7fa f951 	bl	80001f0 <memchr>
 8005f4e:	9a04      	ldr	r2, [sp, #16]
 8005f50:	b9d8      	cbnz	r0, 8005f8a <_svfiprintf_r+0xea>
 8005f52:	06d0      	lsls	r0, r2, #27
 8005f54:	bf44      	itt	mi
 8005f56:	2320      	movmi	r3, #32
 8005f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f5c:	0711      	lsls	r1, r2, #28
 8005f5e:	bf44      	itt	mi
 8005f60:	232b      	movmi	r3, #43	@ 0x2b
 8005f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f66:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f6c:	d015      	beq.n	8005f9a <_svfiprintf_r+0xfa>
 8005f6e:	9a07      	ldr	r2, [sp, #28]
 8005f70:	4654      	mov	r4, sl
 8005f72:	2000      	movs	r0, #0
 8005f74:	f04f 0c0a 	mov.w	ip, #10
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7e:	3b30      	subs	r3, #48	@ 0x30
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	d94b      	bls.n	800601c <_svfiprintf_r+0x17c>
 8005f84:	b1b0      	cbz	r0, 8005fb4 <_svfiprintf_r+0x114>
 8005f86:	9207      	str	r2, [sp, #28]
 8005f88:	e014      	b.n	8005fb4 <_svfiprintf_r+0x114>
 8005f8a:	eba0 0308 	sub.w	r3, r0, r8
 8005f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	46a2      	mov	sl, r4
 8005f98:	e7d2      	b.n	8005f40 <_svfiprintf_r+0xa0>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	9103      	str	r1, [sp, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	425b      	neglt	r3, r3
 8005fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fac:	9307      	strge	r3, [sp, #28]
 8005fae:	9307      	strlt	r3, [sp, #28]
 8005fb0:	bfb8      	it	lt
 8005fb2:	9204      	strlt	r2, [sp, #16]
 8005fb4:	7823      	ldrb	r3, [r4, #0]
 8005fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fb8:	d10a      	bne.n	8005fd0 <_svfiprintf_r+0x130>
 8005fba:	7863      	ldrb	r3, [r4, #1]
 8005fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fbe:	d132      	bne.n	8006026 <_svfiprintf_r+0x186>
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	9203      	str	r2, [sp, #12]
 8005fc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fcc:	3402      	adds	r4, #2
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006094 <_svfiprintf_r+0x1f4>
 8005fd4:	7821      	ldrb	r1, [r4, #0]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4650      	mov	r0, sl
 8005fda:	f7fa f909 	bl	80001f0 <memchr>
 8005fde:	b138      	cbz	r0, 8005ff0 <_svfiprintf_r+0x150>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	eba0 000a 	sub.w	r0, r0, sl
 8005fe6:	2240      	movs	r2, #64	@ 0x40
 8005fe8:	4082      	lsls	r2, r0
 8005fea:	4313      	orrs	r3, r2
 8005fec:	3401      	adds	r4, #1
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff4:	4824      	ldr	r0, [pc, #144]	@ (8006088 <_svfiprintf_r+0x1e8>)
 8005ff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ffa:	2206      	movs	r2, #6
 8005ffc:	f7fa f8f8 	bl	80001f0 <memchr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d036      	beq.n	8006072 <_svfiprintf_r+0x1d2>
 8006004:	4b21      	ldr	r3, [pc, #132]	@ (800608c <_svfiprintf_r+0x1ec>)
 8006006:	bb1b      	cbnz	r3, 8006050 <_svfiprintf_r+0x1b0>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	3307      	adds	r3, #7
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006016:	4433      	add	r3, r6
 8006018:	9309      	str	r3, [sp, #36]	@ 0x24
 800601a:	e76a      	b.n	8005ef2 <_svfiprintf_r+0x52>
 800601c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006020:	460c      	mov	r4, r1
 8006022:	2001      	movs	r0, #1
 8006024:	e7a8      	b.n	8005f78 <_svfiprintf_r+0xd8>
 8006026:	2300      	movs	r3, #0
 8006028:	3401      	adds	r4, #1
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0c0a 	mov.w	ip, #10
 8006032:	4620      	mov	r0, r4
 8006034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006038:	3a30      	subs	r2, #48	@ 0x30
 800603a:	2a09      	cmp	r2, #9
 800603c:	d903      	bls.n	8006046 <_svfiprintf_r+0x1a6>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0c6      	beq.n	8005fd0 <_svfiprintf_r+0x130>
 8006042:	9105      	str	r1, [sp, #20]
 8006044:	e7c4      	b.n	8005fd0 <_svfiprintf_r+0x130>
 8006046:	fb0c 2101 	mla	r1, ip, r1, r2
 800604a:	4604      	mov	r4, r0
 800604c:	2301      	movs	r3, #1
 800604e:	e7f0      	b.n	8006032 <_svfiprintf_r+0x192>
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462a      	mov	r2, r5
 8006056:	4b0e      	ldr	r3, [pc, #56]	@ (8006090 <_svfiprintf_r+0x1f0>)
 8006058:	a904      	add	r1, sp, #16
 800605a:	4638      	mov	r0, r7
 800605c:	f3af 8000 	nop.w
 8006060:	1c42      	adds	r2, r0, #1
 8006062:	4606      	mov	r6, r0
 8006064:	d1d6      	bne.n	8006014 <_svfiprintf_r+0x174>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	065b      	lsls	r3, r3, #25
 800606a:	f53f af2d 	bmi.w	8005ec8 <_svfiprintf_r+0x28>
 800606e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006070:	e72c      	b.n	8005ecc <_svfiprintf_r+0x2c>
 8006072:	ab03      	add	r3, sp, #12
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	462a      	mov	r2, r5
 8006078:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <_svfiprintf_r+0x1f0>)
 800607a:	a904      	add	r1, sp, #16
 800607c:	4638      	mov	r0, r7
 800607e:	f000 f879 	bl	8006174 <_printf_i>
 8006082:	e7ed      	b.n	8006060 <_svfiprintf_r+0x1c0>
 8006084:	080064e8 	.word	0x080064e8
 8006088:	080064f2 	.word	0x080064f2
 800608c:	00000000 	.word	0x00000000
 8006090:	08005de9 	.word	0x08005de9
 8006094:	080064ee 	.word	0x080064ee

08006098 <_printf_common>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	4616      	mov	r6, r2
 800609e:	4698      	mov	r8, r3
 80060a0:	688a      	ldr	r2, [r1, #8]
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bfb8      	it	lt
 80060ac:	4613      	movlt	r3, r2
 80060ae:	6033      	str	r3, [r6, #0]
 80060b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060b4:	4607      	mov	r7, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	b10a      	cbz	r2, 80060be <_printf_common+0x26>
 80060ba:	3301      	adds	r3, #1
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	0699      	lsls	r1, r3, #26
 80060c2:	bf42      	ittt	mi
 80060c4:	6833      	ldrmi	r3, [r6, #0]
 80060c6:	3302      	addmi	r3, #2
 80060c8:	6033      	strmi	r3, [r6, #0]
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	f015 0506 	ands.w	r5, r5, #6
 80060d0:	d106      	bne.n	80060e0 <_printf_common+0x48>
 80060d2:	f104 0a19 	add.w	sl, r4, #25
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	6832      	ldr	r2, [r6, #0]
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dc26      	bgt.n	800612e <_printf_common+0x96>
 80060e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	3b00      	subs	r3, #0
 80060e8:	bf18      	it	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d42b      	bmi.n	8006148 <_printf_common+0xb0>
 80060f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060f4:	4641      	mov	r1, r8
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c8      	blx	r9
 80060fa:	3001      	adds	r0, #1
 80060fc:	d01e      	beq.n	800613c <_printf_common+0xa4>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6922      	ldr	r2, [r4, #16]
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf02      	ittt	eq
 800610a:	68e5      	ldreq	r5, [r4, #12]
 800610c:	6833      	ldreq	r3, [r6, #0]
 800610e:	1aed      	subeq	r5, r5, r3
 8006110:	68a3      	ldr	r3, [r4, #8]
 8006112:	bf0c      	ite	eq
 8006114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006118:	2500      	movne	r5, #0
 800611a:	4293      	cmp	r3, r2
 800611c:	bfc4      	itt	gt
 800611e:	1a9b      	subgt	r3, r3, r2
 8006120:	18ed      	addgt	r5, r5, r3
 8006122:	2600      	movs	r6, #0
 8006124:	341a      	adds	r4, #26
 8006126:	42b5      	cmp	r5, r6
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xc8>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xa8>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4641      	mov	r1, r8
 8006134:	4638      	mov	r0, r7
 8006136:	47c8      	blx	r9
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xac>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c6      	b.n	80060d6 <_printf_common+0x3e>
 8006148:	18e1      	adds	r1, r4, r3
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	2030      	movs	r0, #48	@ 0x30
 800614e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006152:	4422      	add	r2, r4
 8006154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800615c:	3302      	adds	r3, #2
 800615e:	e7c7      	b.n	80060f0 <_printf_common+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4641      	mov	r1, r8
 8006166:	4638      	mov	r0, r7
 8006168:	47c8      	blx	r9
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xa4>
 800616e:	3601      	adds	r6, #1
 8006170:	e7d9      	b.n	8006126 <_printf_common+0x8e>
	...

08006174 <_printf_i>:
 8006174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	7e0f      	ldrb	r7, [r1, #24]
 800617a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800617c:	2f78      	cmp	r7, #120	@ 0x78
 800617e:	4691      	mov	r9, r2
 8006180:	4680      	mov	r8, r0
 8006182:	460c      	mov	r4, r1
 8006184:	469a      	mov	sl, r3
 8006186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800618a:	d807      	bhi.n	800619c <_printf_i+0x28>
 800618c:	2f62      	cmp	r7, #98	@ 0x62
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x32>
 8006190:	2f00      	cmp	r7, #0
 8006192:	f000 80d2 	beq.w	800633a <_printf_i+0x1c6>
 8006196:	2f58      	cmp	r7, #88	@ 0x58
 8006198:	f000 80b9 	beq.w	800630e <_printf_i+0x19a>
 800619c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061a4:	e03a      	b.n	800621c <_printf_i+0xa8>
 80061a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061aa:	2b15      	cmp	r3, #21
 80061ac:	d8f6      	bhi.n	800619c <_printf_i+0x28>
 80061ae:	a101      	add	r1, pc, #4	@ (adr r1, 80061b4 <_printf_i+0x40>)
 80061b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	08006221 	.word	0x08006221
 80061bc:	0800619d 	.word	0x0800619d
 80061c0:	0800619d 	.word	0x0800619d
 80061c4:	0800619d 	.word	0x0800619d
 80061c8:	0800619d 	.word	0x0800619d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800619d 	.word	0x0800619d
 80061d4:	0800619d 	.word	0x0800619d
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	08006321 	.word	0x08006321
 80061e4:	0800624b 	.word	0x0800624b
 80061e8:	080062db 	.word	0x080062db
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006343 	.word	0x08006343
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	0800624b 	.word	0x0800624b
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	080062e3 	.word	0x080062e3
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6032      	str	r2, [r6, #0]
 8006214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800621c:	2301      	movs	r3, #1
 800621e:	e09d      	b.n	800635c <_printf_i+0x1e8>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	1d19      	adds	r1, r3, #4
 8006226:	6031      	str	r1, [r6, #0]
 8006228:	0606      	lsls	r6, r0, #24
 800622a:	d501      	bpl.n	8006230 <_printf_i+0xbc>
 800622c:	681d      	ldr	r5, [r3, #0]
 800622e:	e003      	b.n	8006238 <_printf_i+0xc4>
 8006230:	0645      	lsls	r5, r0, #25
 8006232:	d5fb      	bpl.n	800622c <_printf_i+0xb8>
 8006234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006238:	2d00      	cmp	r5, #0
 800623a:	da03      	bge.n	8006244 <_printf_i+0xd0>
 800623c:	232d      	movs	r3, #45	@ 0x2d
 800623e:	426d      	negs	r5, r5
 8006240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006244:	4859      	ldr	r0, [pc, #356]	@ (80063ac <_printf_i+0x238>)
 8006246:	230a      	movs	r3, #10
 8006248:	e011      	b.n	800626e <_printf_i+0xfa>
 800624a:	6821      	ldr	r1, [r4, #0]
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	0608      	lsls	r0, r1, #24
 8006250:	f853 5b04 	ldr.w	r5, [r3], #4
 8006254:	d402      	bmi.n	800625c <_printf_i+0xe8>
 8006256:	0649      	lsls	r1, r1, #25
 8006258:	bf48      	it	mi
 800625a:	b2ad      	uxthmi	r5, r5
 800625c:	2f6f      	cmp	r7, #111	@ 0x6f
 800625e:	4853      	ldr	r0, [pc, #332]	@ (80063ac <_printf_i+0x238>)
 8006260:	6033      	str	r3, [r6, #0]
 8006262:	bf14      	ite	ne
 8006264:	230a      	movne	r3, #10
 8006266:	2308      	moveq	r3, #8
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800626e:	6866      	ldr	r6, [r4, #4]
 8006270:	60a6      	str	r6, [r4, #8]
 8006272:	2e00      	cmp	r6, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90d      	cbnz	r5, 8006284 <_printf_i+0x110>
 8006280:	2e00      	cmp	r6, #0
 8006282:	d04b      	beq.n	800631c <_printf_i+0x1a8>
 8006284:	4616      	mov	r6, r2
 8006286:	fbb5 f1f3 	udiv	r1, r5, r3
 800628a:	fb03 5711 	mls	r7, r3, r1, r5
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006294:	462f      	mov	r7, r5
 8006296:	42bb      	cmp	r3, r7
 8006298:	460d      	mov	r5, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x112>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x144>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07df      	lsls	r7, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x144>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	@ 0x30
 80062b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062b8:	1b92      	subs	r2, r2, r6
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee6 	bl	8006098 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14a      	bne.n	8006366 <_printf_i+0x1f2>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	4833      	ldr	r0, [pc, #204]	@ (80063b0 <_printf_i+0x23c>)
 80062e4:	2778      	movs	r7, #120	@ 0x78
 80062e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	6831      	ldr	r1, [r6, #0]
 80062ee:	061f      	lsls	r7, r3, #24
 80062f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80062f4:	d402      	bmi.n	80062fc <_printf_i+0x188>
 80062f6:	065f      	lsls	r7, r3, #25
 80062f8:	bf48      	it	mi
 80062fa:	b2ad      	uxthmi	r5, r5
 80062fc:	6031      	str	r1, [r6, #0]
 80062fe:	07d9      	lsls	r1, r3, #31
 8006300:	bf44      	itt	mi
 8006302:	f043 0320 	orrmi.w	r3, r3, #32
 8006306:	6023      	strmi	r3, [r4, #0]
 8006308:	b11d      	cbz	r5, 8006312 <_printf_i+0x19e>
 800630a:	2310      	movs	r3, #16
 800630c:	e7ac      	b.n	8006268 <_printf_i+0xf4>
 800630e:	4827      	ldr	r0, [pc, #156]	@ (80063ac <_printf_i+0x238>)
 8006310:	e7e9      	b.n	80062e6 <_printf_i+0x172>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f023 0320 	bic.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	e7f6      	b.n	800630a <_printf_i+0x196>
 800631c:	4616      	mov	r6, r2
 800631e:	e7bd      	b.n	800629c <_printf_i+0x128>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	6961      	ldr	r1, [r4, #20]
 8006326:	1d18      	adds	r0, r3, #4
 8006328:	6030      	str	r0, [r6, #0]
 800632a:	062e      	lsls	r6, r5, #24
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	d501      	bpl.n	8006334 <_printf_i+0x1c0>
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0x1c6>
 8006334:	0668      	lsls	r0, r5, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0x1bc>
 8006338:	8019      	strh	r1, [r3, #0]
 800633a:	2300      	movs	r3, #0
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	4616      	mov	r6, r2
 8006340:	e7bc      	b.n	80062bc <_printf_i+0x148>
 8006342:	6833      	ldr	r3, [r6, #0]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	6032      	str	r2, [r6, #0]
 8006348:	681e      	ldr	r6, [r3, #0]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	2100      	movs	r1, #0
 800634e:	4630      	mov	r0, r6
 8006350:	f7f9 ff4e 	bl	80001f0 <memchr>
 8006354:	b108      	cbz	r0, 800635a <_printf_i+0x1e6>
 8006356:	1b80      	subs	r0, r0, r6
 8006358:	6060      	str	r0, [r4, #4]
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	2300      	movs	r3, #0
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006364:	e7aa      	b.n	80062bc <_printf_i+0x148>
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	4632      	mov	r2, r6
 800636a:	4649      	mov	r1, r9
 800636c:	4640      	mov	r0, r8
 800636e:	47d0      	blx	sl
 8006370:	3001      	adds	r0, #1
 8006372:	d0ad      	beq.n	80062d0 <_printf_i+0x15c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	d413      	bmi.n	80063a2 <_printf_i+0x22e>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	4298      	cmp	r0, r3
 8006380:	bfb8      	it	lt
 8006382:	4618      	movlt	r0, r3
 8006384:	e7a6      	b.n	80062d4 <_printf_i+0x160>
 8006386:	2301      	movs	r3, #1
 8006388:	4632      	mov	r2, r6
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	47d0      	blx	sl
 8006390:	3001      	adds	r0, #1
 8006392:	d09d      	beq.n	80062d0 <_printf_i+0x15c>
 8006394:	3501      	adds	r5, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	9903      	ldr	r1, [sp, #12]
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	42ab      	cmp	r3, r5
 800639e:	dcf2      	bgt.n	8006386 <_printf_i+0x212>
 80063a0:	e7eb      	b.n	800637a <_printf_i+0x206>
 80063a2:	2500      	movs	r5, #0
 80063a4:	f104 0619 	add.w	r6, r4, #25
 80063a8:	e7f5      	b.n	8006396 <_printf_i+0x222>
 80063aa:	bf00      	nop
 80063ac:	080064f9 	.word	0x080064f9
 80063b0:	0800650a 	.word	0x0800650a

080063b4 <memmove>:
 80063b4:	4288      	cmp	r0, r1
 80063b6:	b510      	push	{r4, lr}
 80063b8:	eb01 0402 	add.w	r4, r1, r2
 80063bc:	d902      	bls.n	80063c4 <memmove+0x10>
 80063be:	4284      	cmp	r4, r0
 80063c0:	4623      	mov	r3, r4
 80063c2:	d807      	bhi.n	80063d4 <memmove+0x20>
 80063c4:	1e43      	subs	r3, r0, #1
 80063c6:	42a1      	cmp	r1, r4
 80063c8:	d008      	beq.n	80063dc <memmove+0x28>
 80063ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063d2:	e7f8      	b.n	80063c6 <memmove+0x12>
 80063d4:	4402      	add	r2, r0
 80063d6:	4601      	mov	r1, r0
 80063d8:	428a      	cmp	r2, r1
 80063da:	d100      	bne.n	80063de <memmove+0x2a>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063e6:	e7f7      	b.n	80063d8 <memmove+0x24>

080063e8 <_sbrk_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	@ (8006404 <_sbrk_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fa fdf4 	bl	8000fe0 <_sbrk>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_sbrk_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_sbrk_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	20000494 	.word	0x20000494

08006408 <memcpy>:
 8006408:	440a      	add	r2, r1
 800640a:	4291      	cmp	r1, r2
 800640c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006410:	d100      	bne.n	8006414 <memcpy+0xc>
 8006412:	4770      	bx	lr
 8006414:	b510      	push	{r4, lr}
 8006416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800641a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800641e:	4291      	cmp	r1, r2
 8006420:	d1f9      	bne.n	8006416 <memcpy+0xe>
 8006422:	bd10      	pop	{r4, pc}

08006424 <_realloc_r>:
 8006424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006428:	4680      	mov	r8, r0
 800642a:	4615      	mov	r5, r2
 800642c:	460c      	mov	r4, r1
 800642e:	b921      	cbnz	r1, 800643a <_realloc_r+0x16>
 8006430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006434:	4611      	mov	r1, r2
 8006436:	f7ff bc4b 	b.w	8005cd0 <_malloc_r>
 800643a:	b92a      	cbnz	r2, 8006448 <_realloc_r+0x24>
 800643c:	f7ff fbdc 	bl	8005bf8 <_free_r>
 8006440:	2400      	movs	r4, #0
 8006442:	4620      	mov	r0, r4
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	f000 f81a 	bl	8006480 <_malloc_usable_size_r>
 800644c:	4285      	cmp	r5, r0
 800644e:	4606      	mov	r6, r0
 8006450:	d802      	bhi.n	8006458 <_realloc_r+0x34>
 8006452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006456:	d8f4      	bhi.n	8006442 <_realloc_r+0x1e>
 8006458:	4629      	mov	r1, r5
 800645a:	4640      	mov	r0, r8
 800645c:	f7ff fc38 	bl	8005cd0 <_malloc_r>
 8006460:	4607      	mov	r7, r0
 8006462:	2800      	cmp	r0, #0
 8006464:	d0ec      	beq.n	8006440 <_realloc_r+0x1c>
 8006466:	42b5      	cmp	r5, r6
 8006468:	462a      	mov	r2, r5
 800646a:	4621      	mov	r1, r4
 800646c:	bf28      	it	cs
 800646e:	4632      	movcs	r2, r6
 8006470:	f7ff ffca 	bl	8006408 <memcpy>
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fbbe 	bl	8005bf8 <_free_r>
 800647c:	463c      	mov	r4, r7
 800647e:	e7e0      	b.n	8006442 <_realloc_r+0x1e>

08006480 <_malloc_usable_size_r>:
 8006480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006484:	1f18      	subs	r0, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfbc      	itt	lt
 800648a:	580b      	ldrlt	r3, [r1, r0]
 800648c:	18c0      	addlt	r0, r0, r3
 800648e:	4770      	bx	lr

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
